"""Main application entry point for NearbyFactBot."""

import logging
import os

from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, ContextTypes, MessageHandler, filters, CallbackQueryHandler

from .handlers.location import handle_location, handle_edited_location, handle_interval_callback

# Load environment variables from .env file
load_dotenv()

# Configure logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /start command."""
    welcome_text = (
        "üó∫Ô∏è *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤!*\n\n"
        "–Ø ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–∏–¥ –ø–æ —Å–∫—Ä—ã—Ç—ã–º –∏—Å—Ç–æ—Ä–∏—è–º –º–µ—Å—Ç. "
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª–æ–∫–∞—Ü–∏—é, –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É –º–∞–ª–æ–∏–∑–≤–µ—Å—Ç–Ω—ã–π, "
        "–Ω–æ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π —Ñ–∞–∫—Ç –æ –º–µ—Å—Ç–µ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏.\n\n"
        "*üìç –û–±—ã—á–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è:*\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ —Å–∫—Ä–µ–ø–∫—É üìé ‚Üí Location\n"
        "‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Ñ–∞–∫—Ç!\n\n"
        "*üî¥ –ñ–∏–≤–∞—è –ª–æ–∫–∞—Ü–∏—è (–¥–ª—è –ø—Ä–æ–≥—É–ª–æ–∫):*\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚Üí ¬´Share Live Location¬ª\n"
        "‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä–µ–º—è (15 –º–∏–Ω - 8 —á–∞—Å–æ–≤)\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É —Ñ–∞–∫—Ç–æ–≤ (5-60 –º–∏–Ω—É—Ç)\n"
        "‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ —Ñ–∞–∫—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!\n\n"
        "*–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*\n"
        "‚Ä¢ –ü—Ä–æ–≥—É–ª–∫–∞ –ø–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–º—É —Ü–µ–Ω—Ç—Ä—É\n"
        "‚Ä¢ –ü–æ–µ–∑–¥–∫–∞ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –ø–æ –Ω–æ–≤–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É\n"
        "‚Ä¢ –¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —ç–∫—Å–∫—É—Ä—Å–∏—è\n"
        "‚Ä¢ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ–∑–Ω–∞–∫–æ–º–æ–≥–æ —Ä–∞–π–æ–Ω–∞\n\n"
        "_–ö–∞–∂–¥—ã–π —Ñ–∞–∫—Ç ‚Äî —ç—Ç–æ –º–∞–ª–µ–Ω—å–∫–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ!_ ‚ú®"
    )
    
    # Create location sharing keyboard
    keyboard = [
        [KeyboardButton("üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ª–æ–∫–∞—Ü–∏–µ–π", request_location=True)],
        [KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"), KeyboardButton("‚ùå –£–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏")]
    ]
    reply_markup = ReplyKeyboardMarkup(
        keyboard, 
        resize_keyboard=True, 
        one_time_keyboard=False  # Keep keyboard visible for convenience
    )
    
    await update.message.reply_text(
        welcome_text, 
        parse_mode="Markdown", 
        reply_markup=reply_markup
    )


async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle info button press."""
    info_text = (
        "‚ÑπÔ∏è *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n\n"
        "*–û–±—ã—á–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è:*\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ª–æ–∫–∞—Ü–∏–µ–π¬ª ‚Üí ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—é —Ç–µ–∫—É—â—É—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é¬ª\n\n"
        "*–ñ–∏–≤–∞—è –ª–æ–∫–∞—Ü–∏—è:*\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ª–æ–∫–∞—Ü–∏–µ–π¬ª ‚Üí ¬´–¢—Ä–∞–Ω—Å–ª–∏—Ä–æ–≤–∞—Ç—å –º–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é¬ª\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ ‚Üí –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ñ–∞–∫—Ç–æ–≤\n\n"
        "*–ö–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n\n"
        "_–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö_"
    )
    
    await update.message.reply_text(info_text, parse_mode="Markdown")


async def remove_keyboard_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle remove keyboard button."""
    await update.message.reply_text(
        "‚úÖ –ö–Ω–æ–ø–∫–∏ —É–±—Ä–∞–Ω—ã.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –∏—Ö.", 
        reply_markup=ReplyKeyboardRemove()
    )


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle errors."""
    logger.error(f"Exception while handling an update: {context.error}")


def main() -> None:
    """Main function to run the bot."""
    logger.info("Starting NearbyFactBot...")

    # Get bot token from environment
    bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not bot_token:
        raise ValueError("TELEGRAM_BOT_TOKEN environment variable is required")

    # Create application
    application = Application.builder().token(bot_token).build()

    # Add command handlers
    application.add_handler(
        MessageHandler(filters.COMMAND & filters.Regex("^/start"), start_command)
    )
    
    # Add text message handlers
    application.add_handler(
        MessageHandler(filters.TEXT & filters.Regex("^‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è$"), info_command)
    )
    application.add_handler(
        MessageHandler(filters.TEXT & filters.Regex("^‚ùå –£–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏$"), remove_keyboard_command)
    )
    
    # Add location handlers
    application.add_handler(MessageHandler(filters.LOCATION, handle_location))
    
    # Add handler for live location updates (edited messages)
    application.add_handler(
        MessageHandler(filters.UpdateType.EDITED_MESSAGE & filters.LOCATION, handle_edited_location)
    )
    
    # Add callback query handler for interval selection
    application.add_handler(
        CallbackQueryHandler(handle_interval_callback, pattern="^interval_")
    )
    
    # Add error handler
    application.add_error_handler(error_handler)

    # Check if we should use webhook or polling
    webhook_url = os.getenv("WEBHOOK_URL")
    port = int(os.getenv("PORT", "8000"))

    if webhook_url:
        # Use webhook for production
        logger.info(f"Starting webhook on port {port}")
        # Use synchronous run_webhook which handles event loop internally
        application.run_webhook(
            listen="0.0.0.0",
            port=port,
            webhook_url=webhook_url,
        )
    else:
        # Use polling for local development
        logger.info("Starting polling mode")
        # Use synchronous run_polling which handles event loop internally
        application.run_polling()


if __name__ == "__main__":
    main()
