"""Main application entry point for NearbyFactBot."""

import logging
import os

from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, ContextTypes, MessageHandler, filters, CallbackQueryHandler

from .handlers.location import handle_location, handle_edited_location, handle_interval_callback

# Load environment variables from .env file
load_dotenv()

# Configure logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /start command."""
    welcome_text = (
        "üó∫Ô∏è *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤!*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é ‚Äî –ø–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ –º–µ—Å—Ç–µ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏.\n\n"
        "*üìç –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞:*\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—É—â–µ–π –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏\n\n"
        "*üî¥ –ñ–∏–≤–∞—è –ª–æ–∫–∞—Ü–∏—è (–¥–ª—è –ø—Ä–æ–≥—É–ª–æ–∫):*\n"
        "üìé ‚Üí Location ‚Üí Share Live Location\n"
        "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç—ã –∫–∞–∂–¥—ã–µ 5-60 –º–∏–Ω—É—Ç –≤–æ –≤—Ä–µ–º—è –¥–≤–∏–∂–µ–Ω–∏—è\n\n"
        "_–ö–∞–∂–¥—ã–π —Ñ–∞–∫—Ç ‚Äî —ç—Ç–æ –º–∞–ª–µ–Ω—å–∫–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ!_ ‚ú®"
    )
    
    # Create simplified location sharing keyboard
    keyboard = [
        [KeyboardButton("üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ª–æ–∫–∞—Ü–∏–µ–π", request_location=True)],
        [KeyboardButton("‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")]
    ]
    reply_markup = ReplyKeyboardMarkup(
        keyboard, 
        resize_keyboard=True, 
        one_time_keyboard=False
    )
    
    await update.message.reply_text(
        welcome_text, 
        parse_mode="Markdown", 
        reply_markup=reply_markup
    )


async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle info button press."""
    info_text = (
        "‚ÑπÔ∏è *–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n\n"
        "*–û–±—ã—á–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è:*\n"
        "‚Ä¢ –ö–Ω–æ–ø–∫–∞ ¬´üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ª–æ–∫–∞—Ü–∏–µ–π¬ª\n"
        "‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Ñ–∞–∫—Ç –æ —Ç–µ–∫—É—â–µ–º –º–µ—Å—Ç–µ\n\n"
        "*–ñ–∏–≤–∞—è –ª–æ–∫–∞—Ü–∏—è (–ø—Ä–æ–≥—É–ª–∫–∏ –ø–æ –≥–æ—Ä–æ–¥—É):*\n"
        "‚Ä¢ –°–∫—Ä–µ–ø–∫–∞ üìé ‚Üí Location ‚Üí Share Live Location\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è (15 –º–∏–Ω - 8 —á–∞—Å–æ–≤)\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —á–∞—Å—Ç–æ—Ç—É —Ñ–∞–∫—Ç–æ–≤ (5-60 –º–∏–Ω—É—Ç)\n"
        "‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ —Ñ–∞–∫—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ –≤—Ä–µ–º—è –¥–≤–∏–∂–µ–Ω–∏—è\n\n"
        "*–ó–∞—á–µ–º –∂–∏–≤–∞—è –ª–æ–∫–∞—Ü–∏—è?*\n"
        "–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≥—É–ª–æ–∫ ‚Äî —É–∑–Ω–∞–≤–∞–π—Ç–µ –æ –º–µ—Å—Ç–∞—Ö "
        "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –Ω–µ –æ—Ç–≤–ª–µ–∫–∞—è—Å—å –æ—Ç —ç–∫—Å–∫—É—Ä—Å–∏–∏!"
    )
    
    await update.message.reply_text(info_text, parse_mode="Markdown")


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle errors."""
    logger.error(f"Exception while handling an update: {context.error}")


def main() -> None:
    """Main function to run the bot."""
    logger.info("Starting NearbyFactBot...")

    # Get bot token from environment
    bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not bot_token:
        raise ValueError("TELEGRAM_BOT_TOKEN environment variable is required")

    # Create application
    application = Application.builder().token(bot_token).build()

    # Add command handlers
    application.add_handler(
        MessageHandler(filters.COMMAND & filters.Regex("^/start"), start_command)
    )
    
    # Add text message handlers
    application.add_handler(
        MessageHandler(filters.TEXT & filters.Regex("^‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è$"), info_command)
    )
    
    # Add location handlers (exclude edited messages)
    application.add_handler(MessageHandler(filters.LOCATION & ~filters.UpdateType.EDITED_MESSAGE, handle_location))
    
    # Add handler for live location updates (edited messages only)
    application.add_handler(
        MessageHandler(filters.UpdateType.EDITED_MESSAGE & filters.LOCATION, handle_edited_location)
    )
    
    # Add callback query handler for interval selection
    application.add_handler(
        CallbackQueryHandler(handle_interval_callback, pattern="^interval_")
    )
    
    # Add error handler
    application.add_error_handler(error_handler)

    # Check if we should use webhook or polling
    webhook_url = os.getenv("WEBHOOK_URL")
    port = int(os.getenv("PORT", "8000"))

    if webhook_url:
        # Use webhook for production
        logger.info(f"Starting webhook on port {port}")
        # Use synchronous run_webhook which handles event loop internally
        application.run_webhook(
            listen="0.0.0.0",
            port=port,
            webhook_url=webhook_url,
        )
    else:
        # Use polling for local development
        logger.info("Starting polling mode")
        # Use synchronous run_polling which handles event loop internally
        application.run_polling()


if __name__ == "__main__":
    main()
