"""Main application entry point for Bot Voyage."""

import logging
import os

from dotenv import load_dotenv
from telegram import KeyboardButton, ReplyKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    PreCheckoutQueryHandler,
    filters,
)

from .handlers.location import (
    handle_edited_location,
    handle_interval_callback,
    handle_location,
)
from .handlers.donations import (
    donate_command,
    handle_donation_callback,
    handle_pre_checkout_query,
    handle_successful_payment,
    stats_command,
    dbtest_command,
)
from .handlers.language_selection import (
    show_language_selection,
    handle_language_selection,
    handle_custom_language_input,
    reset_language_command,
    reason_command,
)
from .services.async_donors_wrapper import get_async_donors_db
from pathlib import Path

# Load environment variables from .env file
load_dotenv()

# Configure logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# Localized welcome messages (focus on Live Location)
LOCALIZED_MESSAGES = {
    'ru': {
        'welcome': (
            "üó∫Ô∏è –ü—Ä–∏–≤–µ—Ç! –Ø *Bot Voyage*. –ü–æ–∫–∞–∂—É –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã –≤–æ–∫—Ä—É–≥ —Ç–µ–±—è.\n\n"
            "‚ÑπÔ∏è –ñ–∏–≤–∞—è –ª–æ–∫–∞—Ü–∏—è ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ —Ç—ã –¥–µ–ª–∏—à—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ä–æ–∫. Telegram –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å ‚Äî —Ñ–∞–∫—Ç—ã –ø—Ä–∏–¥—É—Ç –ø—É—à–∞–º–∏.\n\n"
            "üî¥ –í–∫–ª—é—á–∏–º? –ù–∞–∂–º–∏ –Ω–∏–∂–µ ‚Äî –ø–æ–∫–∞–∂—É –≤ 3 —à–∞–≥–∞."
        ),
        'buttons': {
            'info': "üì±üí° –ö–∞–∫ –≤–∫–ª—é—á–∏—Ç—å –∂–∏–≤—É—é –ª–æ–∫–∞—Ü–∏—é",
            'donate': "‚≠êüíù –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç"
        },
        'info_text': (
            "üì± *–ö–∞–∫ –≤–∫–ª—é—á–∏—Ç—å –∂–∏–≤—É—é –ª–æ–∫–∞—Ü–∏—é:*\n\n"
            "1Ô∏è‚É£ –°–∫—Ä–µ–ø–∫–∞ üìé ‚Üí üìç Location ‚Üí üî¥ Share Live Location\n"
            "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è (–æ–±—ã—á–Ω–æ 60 –º–∏–Ω —É–¥–æ–±–Ω–æ)\n"
            "3Ô∏è‚É£ –ì—É–ª—è–π—Ç–µ ‚Äî —Ñ–∞–∫—Ç—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å–∞–º–∏ (–∫–∞–∂–¥—ã–µ 5‚Äì60 –º–∏–Ω)\n\n"
            "*üí° –ü–æ—á–µ–º—É –∂–∏–≤–∞—è –ª–æ–∫–∞—Ü–∏—è –ª—É—á—à–µ?*\n"
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —ç–∫—Å–∫—É—Ä—Å–æ–≤–æ–¥ –≤ –∫–∞—Ä–º–∞–Ω–µ\n"
            "‚Ä¢ –§–∞–∫—Ç—ã –ø—Ä–∏—Ö–æ–¥—è—Ç —Å–∞–º–∏ –ø–æ –º–µ—Ä–µ –¥–≤–∏–∂–µ–Ω–∏—è\n"
            "‚Ä¢ –ù–µ –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–æ–∫–∞—Ü–∏—é\n"
            "‚Ä¢ –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≥—É–ª–æ–∫\n\n"
            "–ï—Å–ª–∏ —á—Ç–æ ‚Äî —Ä–∞–∑–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è —Ç–æ–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë —á–µ—Ä–µ–∑ üìé."
        )
    },
    'en': {
        'welcome': (
            "üó∫Ô∏è Hi, I‚Äôm *Bot Voyage*. I‚Äôll show surprising facts around you.\n\n"
            "‚ÑπÔ∏è Live location means you share your real‚Äëtime location for a chosen time. You can close Telegram ‚Äî I‚Äôll keep sending facts as push notifications.\n\n"
            "üî¥ Turn it on? Tap below ‚Äî 3 short steps."
        ),
        'buttons': {
            'info': "üì±üí° How to enable Live Location",
            'donate': "‚≠êüíù Support project"
        },
        'info_text': (
            "üì± *How to enable Live Location:*\n\n"
            "1Ô∏è‚É£ Paperclip üìé ‚Üí üìç Location ‚Üí üî¥ Share Live Location\n"
            "2Ô∏è‚É£ Pick a duration (60 min is a good default)\n"
            "3Ô∏è‚É£ Walk ‚Äî facts will arrive automatically (every 5‚Äì60 min)\n\n"
            "*üí° Why is live location better?*\n"
            "‚Ä¢ Personal tour guide in your pocket\n"
            "‚Ä¢ Facts come automatically as you move\n"
            "‚Ä¢ No need to constantly send location\n"
            "‚Ä¢ Perfect for tourist walks\n\n"
            "One-time location also works ‚Äî just send your location via üìé if needed."
        )
    },
    'fr': {
        'welcome': (
            "üó∫Ô∏è Bonjour, je suis *Bot Voyage*. Je montre des faits inattendus autour de vous.\n\n"
            "‚ÑπÔ∏è La position en direct = partager votre position en temps r√©el pendant une dur√©e choisie. Vous pouvez fermer Telegram ‚Äî j‚Äôenverrai quand m√™me les faits.\n\n"
            "üî¥ On l‚Äôactive ? 3 √©tapes ci‚Äëdessous."
        ),
        'buttons': {
            'info': "üì±üí° Activer la position en direct",
            'donate': "‚≠êüíù Soutenir le projet"
        },
        'info_text': (
            "üì± *Activer la position en direct :*\n\n"
            "1Ô∏è‚É£ Trombone üìé ‚Üí üìç Location ‚Üí üî¥ Share Live Location\n"
            "2Ô∏è‚É£ Dur√©e conseill√©e : 60 min\n"
            "3Ô∏è‚É£ Les faits arrivent automatiquement (5‚Äì60 min)\n\n"
            "*üí° Pourquoi la position en direct est-elle meilleure ?*\n"
            "‚Ä¢ Guide touristique personnel dans votre poche\n"
            "‚Ä¢ Les faits arrivent automatiquement en vous d√©pla√ßant\n"
            "‚Ä¢ Pas besoin d'envoyer constamment votre position\n"
            "‚Ä¢ Parfait pour les promenades touristiques\n\n"
            "La position unique fonctionne aussi via üìé si besoin."
        )
    }
    # Add more languages as needed
}


async def send_welcome_message(user_id: int, chat_id: int, bot, language: str = None) -> None:
    """Send welcome message in user's language."""
    if language is None:
        from src.services.async_donors_wrapper import get_async_donors_db
        donors_db = await get_async_donors_db()
        language = await donors_db.get_user_language(user_id)
    
    # Get localized messages (default to English)
    messages = LOCALIZED_MESSAGES.get(language, LOCALIZED_MESSAGES['en'])
    
    welcome_text = messages['welcome']
    buttons = messages['buttons']
    
    # Create keyboard with localized buttons
    # Focus on Live Location: no direct one-time location button
    keyboard = [
        [KeyboardButton(buttons['info'])],
        [KeyboardButton(buttons['donate'])],
    ]
    reply_markup = ReplyKeyboardMarkup(
        keyboard, resize_keyboard=True, one_time_keyboard=False
    )

    await bot.send_message(
        chat_id=chat_id,
        text=welcome_text,
        parse_mode="Markdown",
        reply_markup=reply_markup
    )


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /start command."""
    user = update.effective_user
    donors_db = await get_async_donors_db()
    
    # Check if user has language set
    if not await donors_db.has_language_set(user.id):
        # Show language selection for new users
        await show_language_selection(update, context)
        return
    
    # User has language set, send welcome message in their language
    await send_welcome_message(user.id, update.message.chat_id, context.bot)


async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send concise, sequential live-location onboarding with GIF."""
    user = update.effective_user
    donors_db = await get_async_donors_db()
    language = await donors_db.get_user_language(user.id)

    chat_id = update.effective_chat.id

    # Localized sequence: definition + 3 steps (no buttons)
    steps = {
        'ru': [
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –∂–∏–≤–∞—è –ª–æ–∫–∞—Ü–∏—è: —Ç—ã –¥–µ–ª–∏—à—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ä–æ–∫. Telegram –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å ‚Äî —Ñ–∞–∫—Ç—ã –ø—Ä–∏–¥—É—Ç –ø—É—à–∞–º–∏.",
            "–®–∞–≥ 1/3. –ù–∞–∂–º–∏ üìé –≤–Ω–∏–∑—É.",
            "–®–∞–≥ 2/3. –û—Ç–∫—Ä–æ–π –≤–∫–ª–∞–¥–∫—É üìç –ì–µ–æ–ø–æ–∑–∏—Ü–∏—è/Location —Å–Ω–∏–∑—É.",
            "–®–∞–≥ 3/3. –í—ã–±–µ—Ä–∏ üü¢ –¢—Ä–∞–Ω—Å–ª–∏—Ä–æ–≤–∞—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é/Share My Live Location.",
        ],
        'en': [
            "Live location = share your real‚Äëtime location for a chosen time. You can close Telegram ‚Äî I‚Äôll keep sending facts.",
            "Step 1/3. Tap üìé below.",
            "Step 2/3. Open the üìç Location tab at the bottom.",
            "Step 3/3. Choose üü¢ Share My Live Location.",
        ],
        'fr': [
            "Position en direct = partager votre position en temps r√©el pendant une dur√©e choisie. Vous pouvez fermer Telegram ‚Äî j‚Äôenverrai quand m√™me les faits.",
            "√âtape 1/3. Touchez üìé en bas.",
            "√âtape 2/3. Ouvrez l‚Äôonglet üìç Localisation/Location en bas.",
            "√âtape 3/3. Choisissez üü¢ Partager la position en direct/Share My Live Location.",
        ],
    }
    labels = {
        'ru': { 'next': "–î–∞–ª–µ–µ", 'done': "–ì–æ—Ç–æ–≤–æ", 'go': "–ü–æ–µ—Ö–∞–ª–∏" },
        'en': { 'next': "Next", 'done': "Done", 'go': "Let‚Äôs go" },
        'fr': { 'next': "Suivant", 'done': "Termin√©", 'go': "C‚Äôest parti" },
    }
    lang_steps = steps.get(language, steps['en'])
    lang_labels = labels.get(language, labels['en'])

    # No video or GIF: send only text + step images

    # Send definition text first
    if lang_steps:
        await context.bot.send_message(chat_id=chat_id, text=lang_steps[0])

    # Then send 3 step messages with images if available
    import os
    base_path = Path(__file__).resolve().parent.parent
    step_images = ["IMG_9249.PNG", "IMG_9248.PNG", "IMG_9247.PNG"]
    step_file_ids = [
        os.getenv("HOWTO_STEP1_FILE_ID"),
        os.getenv("HOWTO_STEP2_FILE_ID"), 
        os.getenv("HOWTO_STEP3_FILE_ID"),
    ]

    for idx in range(1, min(4, len(lang_steps))):
        caption = lang_steps[idx]
        sent_photo = False
        
        # First priority: use file_id from environment (best for Railway)
        file_id = step_file_ids[idx-1]
        if file_id:
            try:
                await context.bot.send_photo(chat_id=chat_id, photo=file_id, caption=caption)
                logger.info(f"Sent step {idx} image via file_id")
                sent_photo = True
            except Exception as e:
                logger.warning(f"Failed to send step {idx} photo via file_id: {e}")
        
        # Second priority: try local file (for local development)
        if not sent_photo:
            image_name = step_images[idx-1]
            image_path = base_path / "docs" / image_name
            
            if image_path.exists():
                try:
                    with open(image_path, "rb") as f:
                        await context.bot.send_photo(chat_id=chat_id, photo=f, caption=caption)
                    logger.info(f"Sent step {idx} image from {image_path}")
                    sent_photo = True
                except Exception as e:
                    logger.warning(f"Failed to send photo {image_path}: {e}")
        
        # Fallback to text-only message
        if not sent_photo:
            await context.bot.send_message(chat_id=chat_id, text=caption)


# Removed callback-based onboarding (now sequential messages without buttons)


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle errors."""
    logger.error(f"Exception while handling an update: {context.error}")


def main() -> None:
    """Main function to run the bot."""
    logger.info("Starting Bot Voyage...")
    
    # Run database migration if PostgreSQL is configured
    if os.environ.get("DATABASE_URL"):
        logger.info("PostgreSQL detected, checking for migration...")
        try:
            import asyncio
            from src.utils.migrate_to_postgres import check_and_migrate
            
            # Create new event loop for migration
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(check_and_migrate())
            loop.close()
            
            # Reset event loop for telegram bot
            asyncio.set_event_loop(asyncio.new_event_loop())
        except Exception as e:
            logger.error(f"Migration check failed: {e}")
            # Continue anyway - database will be created empty

    # Get bot token from environment
    bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not bot_token:
        raise ValueError("TELEGRAM_BOT_TOKEN environment variable is required")

    # Create application
    application = Application.builder().token(bot_token).build()

    # Add command handlers
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("donate", donate_command))
    application.add_handler(CommandHandler("live", info_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("dbtest", dbtest_command))
    application.add_handler(CommandHandler("reset", reset_language_command))
    # Hidden command to control reasoning effort per user
    application.add_handler(CommandHandler("reason", reason_command))

    # Add universal button handlers (check multiple language variants)
    # Info button patterns
    info_patterns = [
        "^üì±üí° –ö–∞–∫ –≤–∫–ª—é—á–∏—Ç—å –∂–∏–≤—É—é –ª–æ–∫–∞—Ü–∏—é$",
        "^üì±üí° How to enable Live Location$",
        "^üì±üí° Activer la position en direct$"
    ]
    for pattern in info_patterns:
        application.add_handler(
            MessageHandler(filters.TEXT & filters.Regex(pattern), info_command)
        )
    
    # Donate button patterns  
    donate_patterns = [
        "^‚≠êüíù –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç$",
        "^‚≠êüíù Support project$",
        "^‚≠êüíù Soutenir le projet$"
    ]
    for pattern in donate_patterns:
        application.add_handler(
            MessageHandler(filters.TEXT & filters.Regex(pattern), donate_command)
        )
    
    # Add custom language input handler (must be after button handlers)
    application.add_handler(
        MessageHandler(
            filters.TEXT & ~filters.COMMAND & ~filters.LOCATION, handle_custom_language_input
        )
    )

    # Add location handlers (exclude edited messages)
    application.add_handler(
        MessageHandler(
            filters.LOCATION & ~filters.UpdateType.EDITED_MESSAGE, handle_location
        )
    )

    # Add handler for live location updates (edited messages only)
    application.add_handler(
        MessageHandler(
            filters.UpdateType.EDITED_MESSAGE & filters.LOCATION, handle_edited_location
        )
    )

    # Add callback query handlers
    application.add_handler(
        CallbackQueryHandler(handle_interval_callback, pattern="^interval_")
    )
    # No callback handler needed: onboarding sends sequential messages without buttons
    application.add_handler(
        CallbackQueryHandler(handle_donation_callback, pattern="^donate_")
    )
    application.add_handler(
        CallbackQueryHandler(handle_language_selection, pattern="^lang_")
    )
    
    # Add payment handlers
    application.add_handler(PreCheckoutQueryHandler(handle_pre_checkout_query))
    application.add_handler(
        MessageHandler(filters.SUCCESSFUL_PAYMENT, handle_successful_payment)
    )

    # Add error handler
    application.add_error_handler(error_handler)

    # Check if we should use webhook or polling
    webhook_url = os.getenv("WEBHOOK_URL")
    port = int(os.getenv("PORT", "8000"))

    if webhook_url:
        # Use webhook for production
        logger.info(f"Starting webhook on port {port}")
        # Use synchronous run_webhook which handles event loop internally
        application.run_webhook(
            listen="0.0.0.0",
            port=port,
            webhook_url=webhook_url,
        )
    else:
        # Use polling for local development
        logger.info("Starting polling mode")
        # Use synchronous run_polling which handles event loop internally
        application.run_polling()


if __name__ == "__main__":
    main()
