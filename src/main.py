"""Main application entry point for Bot Voyage."""

import logging
import os

from dotenv import load_dotenv
from telegram import KeyboardButton, ReplyKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    PreCheckoutQueryHandler,
    filters,
)

from .handlers.location import (
    handle_edited_location,
    handle_interval_callback,
    handle_location,
)
from .handlers.donations import (
    donate_command,
    handle_donation_callback,
    handle_pre_checkout_query,
    handle_successful_payment,
    stats_command,
    dbtest_command,
)
from .handlers.language_selection import (
    show_language_selection,
    handle_language_selection,
    handle_custom_language_input,
    reset_language_command,
)
from .services.async_donors_wrapper import get_async_donors_db

# Load environment variables from .env file
load_dotenv()

# Configure logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# Localized welcome messages (focus on Live Location)
LOCALIZED_MESSAGES = {
    'ru': {
        'welcome': (
            "üó∫Ô∏è –ü—Ä–∏–≤–µ—Ç! –Ø *Bot Voyage*. –Ø –ø–æ–∫–∞–∑—ã–≤–∞—é –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –º–µ—Å—Ç–∞—Ö –≤–æ–∫—Ä—É–≥ —Ç–µ–±—è.\n\n"
            "üî¥ –•–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∂–∏–≤—É—é –ª–æ–∫–∞—Ü–∏—é? –Ø —Å–∞–º –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ñ–∞–∫—Ç—ã –ø–æ –ø—É—Ç–∏.\n"
            "–ù–∞–∂–º–∏ –Ω–∏–∂–µ ‚Äî –∫–æ—Ä–æ—Ç–∫–æ –ø–æ–∫–∞–∂—É, –∫–∞–∫ –≤–∫–ª—é—á–∏—Ç—å."
        ),
        'buttons': {
            'info': "üì±üí° –ö–∞–∫ –≤–∫–ª—é—á–∏—Ç—å –∂–∏–≤—É—é –ª–æ–∫–∞—Ü–∏—é",
            'donate': "‚≠êüíù –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç"
        },
        'info_text': (
            "üì± *–ö–∞–∫ –≤–∫–ª—é—á–∏—Ç—å –∂–∏–≤—É—é –ª–æ–∫–∞—Ü–∏—é:*\n\n"
            "1Ô∏è‚É£ –°–∫—Ä–µ–ø–∫–∞ üìé ‚Üí üìç Location ‚Üí üî¥ Share Live Location\n"
            "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è (–æ–±—ã—á–Ω–æ 60 –º–∏–Ω —É–¥–æ–±–Ω–æ)\n"
            "3Ô∏è‚É£ –ì—É–ª—è–π—Ç–µ ‚Äî —Ñ–∞–∫—Ç—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å–∞–º–∏ (–∫–∞–∂–¥—ã–µ 5‚Äì60 –º–∏–Ω)\n\n"
            "*üí° –ü–æ—á–µ–º—É –∂–∏–≤–∞—è –ª–æ–∫–∞—Ü–∏—è –ª—É—á—à–µ?*\n"
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —ç–∫—Å–∫—É—Ä—Å–æ–≤–æ–¥ –≤ –∫–∞—Ä–º–∞–Ω–µ\n"
            "‚Ä¢ –§–∞–∫—Ç—ã –ø—Ä–∏—Ö–æ–¥—è—Ç —Å–∞–º–∏ –ø–æ –º–µ—Ä–µ –¥–≤–∏–∂–µ–Ω–∏—è\n"
            "‚Ä¢ –ù–µ –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–æ–∫–∞—Ü–∏—é\n"
            "‚Ä¢ –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≥—É–ª–æ–∫\n\n"
            "–ï—Å–ª–∏ —á—Ç–æ ‚Äî —Ä–∞–∑–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è —Ç–æ–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë —á–µ—Ä–µ–∑ üìé."
        )
    },
    'en': {
        'welcome': (
            "üó∫Ô∏è *Bot Voyage ‚Äî facts while you walk!*\n\n"
            "üî¥ *Live location is the main mode:*\n"
            "üìé ‚Üí Location ‚Üí Share Live Location (5‚Äì60 min and more)\n"
            "I‚Äôll send facts automatically as you move\n\n"
            "Tap below to see how to enable live location."
        ),
        'buttons': {
            'info': "üì±üí° How to enable Live Location",
            'donate': "‚≠êüíù Support project"
        },
        'info_text': (
            "üì± *How to enable Live Location:*\n\n"
            "1Ô∏è‚É£ Paperclip üìé ‚Üí üìç Location ‚Üí üî¥ Share Live Location\n"
            "2Ô∏è‚É£ Pick a duration (60 min is a good default)\n"
            "3Ô∏è‚É£ Walk ‚Äî facts will arrive automatically (every 5‚Äì60 min)\n\n"
            "*üí° Why is live location better?*\n"
            "‚Ä¢ Personal tour guide in your pocket\n"
            "‚Ä¢ Facts come automatically as you move\n"
            "‚Ä¢ No need to constantly send location\n"
            "‚Ä¢ Perfect for tourist walks\n\n"
            "One-time location also works ‚Äî just send your location via üìé if needed."
        )
    },
    'fr': {
        'welcome': (
            "üó∫Ô∏è *Bienvenue dans le bot des faits √©tonnants !*\n\n"
            "üî¥ *Position en direct ‚Äî votre guide touristique personnel :*\n"
            "üìé ‚Üí Location ‚Üí Share Live Location (15 min - 8 heures)\n"
            "Faits automatiques toutes les 5-60 minutes pendant votre promenade\n\n"
            "üìç *Aussi disponible :* envoi unique de position actuelle\n"
            "Appuyez sur le bouton ci-dessous pour un fait instantan√© sur le lieu\n\n"
            "_Chaque fait est une petite d√©couverte pr√®s de vous !_ ‚ú®"
        ),
        'buttons': {
            'info': "üì±üí° Activer la position en direct",
            'donate': "‚≠êüíù Soutenir le projet"
        },
        'info_text': (
            "üì± *Activer la position en direct :*\n\n"
            "1Ô∏è‚É£ Trombone üìé ‚Üí üìç Location ‚Üí üî¥ Share Live Location\n"
            "2Ô∏è‚É£ Dur√©e conseill√©e : 60 min\n"
            "3Ô∏è‚É£ Les faits arrivent automatiquement (5‚Äì60 min)\n\n"
            "*üí° Pourquoi la position en direct est-elle meilleure ?*\n"
            "‚Ä¢ Guide touristique personnel dans votre poche\n"
            "‚Ä¢ Les faits arrivent automatiquement en vous d√©pla√ßant\n"
            "‚Ä¢ Pas besoin d'envoyer constamment votre position\n"
            "‚Ä¢ Parfait pour les promenades touristiques\n\n"
            "La position unique fonctionne aussi via üìé si besoin."
        )
    }
    # Add more languages as needed
}


async def send_welcome_message(user_id: int, chat_id: int, bot, language: str = None) -> None:
    """Send welcome message in user's language."""
    if language is None:
        from src.services.async_donors_wrapper import get_async_donors_db
        donors_db = await get_async_donors_db()
        language = await donors_db.get_user_language(user_id)
    
    # Get localized messages (default to English)
    messages = LOCALIZED_MESSAGES.get(language, LOCALIZED_MESSAGES['en'])
    
    welcome_text = messages['welcome']
    buttons = messages['buttons']
    
    # Create keyboard with localized buttons
    # Focus on Live Location: no direct one-time location button
    keyboard = [
        [KeyboardButton(buttons['info'])],
        [KeyboardButton(buttons['donate'])],
    ]
    reply_markup = ReplyKeyboardMarkup(
        keyboard, resize_keyboard=True, one_time_keyboard=False
    )

    await bot.send_message(
        chat_id=chat_id,
        text=welcome_text,
        parse_mode="Markdown",
        reply_markup=reply_markup
    )


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /start command."""
    user = update.effective_user
    donors_db = await get_async_donors_db()
    
    # Check if user has language set
    if not await donors_db.has_language_set(user.id):
        # Show language selection for new users
        await show_language_selection(update, context)
        return
    
    # User has language set, send welcome message in their language
    await send_welcome_message(user.id, update.message.chat_id, context.bot)


async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Interactive onboarding for Live Location (step-by-step)."""
    user = update.effective_user
    donors_db = await get_async_donors_db()
    language = await donors_db.get_user_language(user.id)

    # Simple state machine in memory (per chat)
    chat_id = update.effective_chat.id
    if "onboarding_step" not in context.chat_data:
        context.chat_data["onboarding_step"] = 0

    step = context.chat_data["onboarding_step"]

    # Localized short steps
    steps = {
        'ru': [
            "–®–∞–≥ 1/3. –ù–∞–∂–º–∏ —Å–∫—Ä–µ–ø–∫—É üìé –≤–Ω–∏–∑—É ‚Äî —ç—Ç–æ –º–µ–Ω—é –≤–ª–æ–∂–µ–Ω–∏–π.",
            "–®–∞–≥ 2/3. –í—ã–±–µ—Ä–∏ üìç Location ‚Üí üî¥ Share Live Location ‚Äî —è –Ω–∞—á–Ω—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –º–∞—Ä—à—Ä—É—Ç–æ–º.",
            "–®–∞–≥ 3/3. –ü–æ—Å—Ç–∞–≤—å –≤—Ä–µ–º—è (–æ–±—ã—á–Ω–æ 60 –º–∏–Ω). –î–∞–ª—å—à–µ —è —Å–∞–º –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ñ–∞–∫—Ç—ã –ø–æ –ø—É—Ç–∏.",
        ],
        'en': [
            "Step 1/3. Tap the paperclip üìé below ‚Äî that‚Äôs the attachment menu.",
            "Step 2/3. Choose üìç Location ‚Üí üî¥ Share Live Location ‚Äî I‚Äôll start following your route.",
            "Step 3/3. Pick a duration (60 min works well). I‚Äôll send facts automatically as you walk.",
        ],
        'fr': [
            "√âtape 1/3. Touchez le trombone üìé en bas ‚Äî le menu des pi√®ces jointes.",
            "√âtape 2/3. Choisissez üìç Location ‚Üí üî¥ Share Live Location ‚Äî je suivrai votre trajet.",
            "√âtape 3/3. Choisissez la dur√©e (60 min). J‚Äôenverrai des faits automatiquement en marchant.",
        ],
    }
    labels = {
        'ru': { 'next': "–î–∞–ª–µ–µ", 'done': "–ì–æ—Ç–æ–≤–æ", 'go': "–ü–æ–µ—Ö–∞–ª–∏" },
        'en': { 'next': "Next", 'done': "Done", 'go': "Let‚Äôs go" },
        'fr': { 'next': "Suivant", 'done': "Termin√©", 'go': "C‚Äôest parti" },
    }
    lang_steps = steps.get(language, steps['en'])
    lang_labels = labels.get(language, labels['en'])

    # Send GIF on the first step
    if step == 0:
        try:
            import os
            gif_path = os.getenv("HOWTO_GIF_PATH", "howtobot.gif")
            if os.path.exists(gif_path):
                with open(gif_path, "rb") as f:
                    await context.bot.send_animation(chat_id=chat_id, animation=f)
            else:
                file_id = os.getenv("HOWTO_GIF_FILE_ID")
                if file_id:
                    await context.bot.send_animation(chat_id=chat_id, animation=file_id)
        except Exception as e:
            logger.debug(f"Failed to send how-to gif: {e}")

    # Compose inline keyboard for step
    from telegram import InlineKeyboardMarkup, InlineKeyboardButton
    if step < len(lang_steps) - 1:
        buttons = [[InlineKeyboardButton(lang_labels['next'], callback_data="live_onboarding_next")]]
    else:
        buttons = [[InlineKeyboardButton(lang_labels['go'], callback_data="live_onboarding_done")]]

    await context.bot.send_message(
        chat_id=chat_id,
        text=lang_steps[step],
        reply_markup=InlineKeyboardMarkup(buttons)
    )

    # Advance step
    context.chat_data["onboarding_step"] = (step + 1) % len(lang_steps)


async def live_onboarding_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    data = query.data
    # Reuse info_command logic to send next step
    if data == "live_onboarding_next":
        await info_command(update, context)
    elif data == "live_onboarding_done":
        # Reset step and send short confirmation
        context.chat_data["onboarding_step"] = 0
        await query.edit_message_text("–û—Ç–ª–∏—á–Ω–æ! –í–∫–ª—é—á–∞–π—Ç–µ –∂–∏–≤—É—é –ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ üìé ‚Üí üìç ‚Üí üî¥, —è –∂–¥—É.")


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle errors."""
    logger.error(f"Exception while handling an update: {context.error}")


def main() -> None:
    """Main function to run the bot."""
    logger.info("Starting Bot Voyage...")
    
    # Run database migration if PostgreSQL is configured
    if os.environ.get("DATABASE_URL"):
        logger.info("PostgreSQL detected, checking for migration...")
        try:
            import asyncio
            from src.utils.migrate_to_postgres import check_and_migrate
            
            # Create new event loop for migration
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(check_and_migrate())
            loop.close()
            
            # Reset event loop for telegram bot
            asyncio.set_event_loop(asyncio.new_event_loop())
        except Exception as e:
            logger.error(f"Migration check failed: {e}")
            # Continue anyway - database will be created empty

    # Get bot token from environment
    bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not bot_token:
        raise ValueError("TELEGRAM_BOT_TOKEN environment variable is required")

    # Create application
    application = Application.builder().token(bot_token).build()

    # Add command handlers
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("donate", donate_command))
    application.add_handler(CommandHandler("live", info_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("dbtest", dbtest_command))
    application.add_handler(CommandHandler("reset", reset_language_command))

    # Add universal button handlers (check multiple language variants)
    # Info button patterns
    info_patterns = [
        "^üì±üí° –ö–∞–∫ –≤–∫–ª—é—á–∏—Ç—å –∂–∏–≤—É—é –ª–æ–∫–∞—Ü–∏—é$",
        "^üì±üí° How to enable Live Location$",
        "^üì±üí° Activer la position en direct$"
    ]
    for pattern in info_patterns:
        application.add_handler(
            MessageHandler(filters.TEXT & filters.Regex(pattern), info_command)
        )
    
    # Donate button patterns  
    donate_patterns = [
        "^‚≠êüíù –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç$",
        "^‚≠êüíù Support project$",
        "^‚≠êüíù Soutenir le projet$"
    ]
    for pattern in donate_patterns:
        application.add_handler(
            MessageHandler(filters.TEXT & filters.Regex(pattern), donate_command)
        )
    
    # Add custom language input handler (must be after button handlers)
    application.add_handler(
        MessageHandler(
            filters.TEXT & ~filters.COMMAND & ~filters.LOCATION, handle_custom_language_input
        )
    )

    # Add location handlers (exclude edited messages)
    application.add_handler(
        MessageHandler(
            filters.LOCATION & ~filters.UpdateType.EDITED_MESSAGE, handle_location
        )
    )

    # Add handler for live location updates (edited messages only)
    application.add_handler(
        MessageHandler(
            filters.UpdateType.EDITED_MESSAGE & filters.LOCATION, handle_edited_location
        )
    )

    # Add callback query handlers
    application.add_handler(
        CallbackQueryHandler(handle_interval_callback, pattern="^interval_")
    )
    application.add_handler(
        CallbackQueryHandler(live_onboarding_callback, pattern="^live_onboarding_")
    )
    application.add_handler(
        CallbackQueryHandler(handle_donation_callback, pattern="^donate_")
    )
    application.add_handler(
        CallbackQueryHandler(handle_language_selection, pattern="^lang_")
    )
    
    # Add payment handlers
    application.add_handler(PreCheckoutQueryHandler(handle_pre_checkout_query))
    application.add_handler(
        MessageHandler(filters.SUCCESSFUL_PAYMENT, handle_successful_payment)
    )

    # Add error handler
    application.add_error_handler(error_handler)

    # Check if we should use webhook or polling
    webhook_url = os.getenv("WEBHOOK_URL")
    port = int(os.getenv("PORT", "8000"))

    if webhook_url:
        # Use webhook for production
        logger.info(f"Starting webhook on port {port}")
        # Use synchronous run_webhook which handles event loop internally
        application.run_webhook(
            listen="0.0.0.0",
            port=port,
            webhook_url=webhook_url,
        )
    else:
        # Use polling for local development
        logger.info("Starting polling mode")
        # Use synchronous run_polling which handles event loop internally
        application.run_polling()


if __name__ == "__main__":
    main()
