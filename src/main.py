"""Main application entry point for NearbyFactBot."""

import logging
import os

from dotenv import load_dotenv
from telegram import KeyboardButton, ReplyKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

from .handlers.location import (
    handle_edited_location,
    handle_interval_callback,
    handle_location,
)

# Load environment variables from .env file
load_dotenv()

# Configure logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /start command."""
    welcome_text = (
        "üó∫Ô∏è *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤!*\n\n"
        "üî¥ *–ñ–∏–≤–∞—è –ª–æ–∫–∞—Ü–∏—è ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —ç–∫—Å–∫—É—Ä—Å–æ–≤–æ–¥:*\n"
        "üìé ‚Üí Location ‚Üí Share Live Location (15 –º–∏–Ω - 8 —á–∞—Å–æ–≤)\n"
        "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç—ã –∫–∞–∂–¥—ã–µ 5-60 –º–∏–Ω—É—Ç –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏\n\n"
        "üìç *–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω–æ:* —Ä–∞–∑–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—É—â–µ–π –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞ –æ –º–µ—Å—Ç–µ\n\n"
        "_–ö–∞–∂–¥—ã–π —Ñ–∞–∫—Ç ‚Äî —ç—Ç–æ –º–∞–ª–µ–Ω—å–∫–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ä—è–¥–æ–º —Å –≤–∞–º–∏!_ ‚ú®"
    )

    # Create location sharing keyboard with live location first
    keyboard = [
        [KeyboardButton("üî¥ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ª–æ–∫–∞—Ü–∏–µ–π", request_location=True)],
        [KeyboardButton("üìñ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞")],
    ]
    reply_markup = ReplyKeyboardMarkup(
        keyboard, resize_keyboard=True, one_time_keyboard=False
    )

    await update.message.reply_text(
        welcome_text, parse_mode="Markdown", reply_markup=reply_markup
    )


async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle info button press."""
    info_text = (
        "üìñ *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:*\n\n"
        "üî¥ *–ñ–∏–≤–∞—è –ª–æ–∫–∞—Ü–∏—è ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º:*\n"
        "1Ô∏è‚É£ –°–∫—Ä–µ–ø–∫–∞ üìé ‚Üí Location ‚Üí Share Live Location\n"
        "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è (15 –º–∏–Ω - 8 —á–∞—Å–æ–≤)\n"
        "3Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —á–∞—Å—Ç–æ—Ç—É —Ñ–∞–∫—Ç–æ–≤ (–∫–∞–∂–¥—ã–µ 5-60 –º–∏–Ω—É—Ç)\n"
        "4Ô∏è‚É£ –ì—É–ª—è–π—Ç–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —Ñ–∞–∫—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!\n\n"
        "*üí° –ü–æ—á–µ–º—É –∂–∏–≤–∞—è –ª–æ–∫–∞—Ü–∏—è –ª—É—á—à–µ?*\n"
        "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —ç–∫—Å–∫—É—Ä—Å–æ–≤–æ–¥ –≤ –∫–∞—Ä–º–∞–Ω–µ\n"
        "‚Ä¢ –§–∞–∫—Ç—ã –ø—Ä–∏—Ö–æ–¥—è—Ç —Å–∞–º–∏ –ø–æ –º–µ—Ä–µ –¥–≤–∏–∂–µ–Ω–∏—è\n"
        "‚Ä¢ –ù–µ –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–æ–∫–∞—Ü–∏—é\n"
        "‚Ä¢ –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≥—É–ª–æ–∫\n\n"
        "üìç *–†–∞–∑–æ–≤–∞—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è:*\n"
        "‚Ä¢ –ö–Ω–æ–ø–∫–∞ ¬´üî¥ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ª–æ–∫–∞—Ü–∏–µ–π¬ª\n"
        "‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Ñ–∞–∫—Ç –æ —Ç–µ–∫—É—â–µ–º –º–µ—Å—Ç–µ\n"
        "‚Ä¢ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"
    )

    await update.message.reply_text(info_text, parse_mode="Markdown")


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle errors."""
    logger.error(f"Exception while handling an update: {context.error}")


def main() -> None:
    """Main function to run the bot."""
    logger.info("Starting NearbyFactBot...")

    # Get bot token from environment
    bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not bot_token:
        raise ValueError("TELEGRAM_BOT_TOKEN environment variable is required")

    # Create application
    application = Application.builder().token(bot_token).build()

    # Add command handlers
    application.add_handler(
        MessageHandler(filters.COMMAND & filters.Regex("^/start"), start_command)
    )

    # Add text message handlers
    application.add_handler(
        MessageHandler(
            filters.TEXT & filters.Regex("^üìñ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞$"), info_command
        )
    )

    # Add location handlers (exclude edited messages)
    application.add_handler(
        MessageHandler(
            filters.LOCATION & ~filters.UpdateType.EDITED_MESSAGE, handle_location
        )
    )

    # Add handler for live location updates (edited messages only)
    application.add_handler(
        MessageHandler(
            filters.UpdateType.EDITED_MESSAGE & filters.LOCATION, handle_edited_location
        )
    )

    # Add callback query handler for interval selection
    application.add_handler(
        CallbackQueryHandler(handle_interval_callback, pattern="^interval_")
    )

    # Add error handler
    application.add_error_handler(error_handler)

    # Check if we should use webhook or polling
    webhook_url = os.getenv("WEBHOOK_URL")
    port = int(os.getenv("PORT", "8000"))

    if webhook_url:
        # Use webhook for production
        logger.info(f"Starting webhook on port {port}")
        # Use synchronous run_webhook which handles event loop internally
        application.run_webhook(
            listen="0.0.0.0",
            port=port,
            webhook_url=webhook_url,
        )
    else:
        # Use polling for local development
        logger.info("Starting polling mode")
        # Use synchronous run_polling which handles event loop internally
        application.run_polling()


if __name__ == "__main__":
    main()
