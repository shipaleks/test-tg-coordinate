"""Donation handlers for Telegram Stars payments."""

import logging
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    LabeledPrice,
    Update,
)
from telegram.ext import ContextTypes

from ..services.donors_db import get_donors_db

logger = logging.getLogger(__name__)


async def donate_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /donate command."""
    user = update.effective_user
    
    # Check current premium status
    donors_db = get_donors_db()
    is_premium = donors_db.is_premium_user(user.id)
    donor_info = donors_db.get_donor_info(user.id)
    
    # Create status text
    if is_premium and donor_info:
        status_text = f"‚ú® *–ü—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–µ–Ω*\nüìä –í—Å–µ–≥–æ –∑–≤–µ–∑–¥: {donor_info['total_stars']}‚≠ê\n\n"
    elif donor_info:
        status_text = f"üí´ *–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!*\nüìä –í—Å–µ–≥–æ –∑–≤–µ–∑–¥: {donor_info['total_stars']}‚≠ê\n\n"
    else:
        status_text = ""
    
    donate_text = (
        "üåü *–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç*\n\n"
        + status_text +
        "–í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç:\n"
        "‚Ä¢ ü§ñ –û–ø–ª–∞—á–∏–≤–∞—Ç—å OpenAI API –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤\n"
        "‚Ä¢ üöÄ –†–∞–∑–≤–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞\n"
        "‚Ä¢ üì° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä 24/7\n\n"
        "üíé *–ë–æ–Ω—É—Å –¥–ª—è –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤:*\n"
        "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –º–æ–¥–µ–ª–∏ o3 (–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ñ–∞–∫—Ç—ã)\n"
        "‚Ä¢ 1 –∑–≤–µ–∑–¥–∞ = 1 –¥–µ–Ω—å –ø—Ä–µ–º–∏—É–º–∞\n\n"
        "üíù *–õ—é–±–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–∞ –∏ –æ—á–µ–Ω—å —Ü–µ–Ω–∏—Ç—Å—è!*"
    )
    
    # Create donation buttons
    keyboard = [
        [
            InlineKeyboardButton("10‚≠ê", callback_data="donate_10"),
            InlineKeyboardButton("50‚≠ê", callback_data="donate_50"),
            InlineKeyboardButton("100‚≠ê", callback_data="donate_100"),
        ],
        [
            InlineKeyboardButton("üí∞ –î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data="donate_custom"),
        ],
    ]
    
    # Add premium info button if not premium
    if not is_premium:
        keyboard.append([
            InlineKeyboardButton("‚ùì –ß—Ç–æ –¥–∞–µ—Ç –ø—Ä–µ–º–∏—É–º?", callback_data="premium_info")
        ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        donate_text, 
        parse_mode="Markdown", 
        reply_markup=reply_markup
    )


async def handle_donation_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle donation button callbacks."""
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    chat_id = query.message.chat_id
    
    if query.data == "premium_info":
        info_text = (
            "üíé *–ü—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏*\n\n"
            "üß† *OpenAI o3 –º–æ–¥–µ–ª—å:*\n"
            "‚Ä¢ –ë–æ–ª–µ–µ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ª–æ–∫–∞—Ü–∏–π\n"
            "‚Ä¢ –¢–æ—á–Ω–µ–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–µ—Å—Ç\n"
            "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–µ–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç—ã\n"
            "‚Ä¢ –õ—É—á—à–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n\n"
            "‚è∞ *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:*\n"
            "‚Ä¢ 1 –∑–≤–µ–∑–¥–∞ = 1 –¥–µ–Ω—å –ø—Ä–µ–º–∏—É–º–∞\n"
            "‚Ä¢ –í—Ä–µ–º—è —Å—É–º–º–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –¥–æ–Ω–∞—Ç–∞—Ö\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏:"
        )
        
        keyboard = [
            [
                InlineKeyboardButton("10‚≠ê", callback_data="donate_10"),
                InlineKeyboardButton("50‚≠ê", callback_data="donate_50"),
                InlineKeyboardButton("100‚≠ê", callback_data="donate_100"),
            ],
            [
                InlineKeyboardButton("üí∞ –î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data="donate_custom"),
            ],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            info_text,
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
        return
    
    # Handle donation amounts
    if query.data.startswith("donate_"):
        amount_str = query.data.replace("donate_", "")
        
        if amount_str == "custom":
            custom_keyboard = [
                [
                    InlineKeyboardButton("25‚≠ê", callback_data="donate_25"),
                    InlineKeyboardButton("75‚≠ê", callback_data="donate_75"),
                ],
                [
                    InlineKeyboardButton("200‚≠ê", callback_data="donate_200"),
                    InlineKeyboardButton("500‚≠ê", callback_data="donate_500"),
                ],
                [
                    InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="donate_back"),
                ],
            ]
            custom_markup = InlineKeyboardMarkup(custom_keyboard)
            
            await query.edit_message_text(
                "üí∞ *–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É:*\n\n"
                "‚≠ê –ü–æ–º–Ω–∏—Ç–µ: 1 –∑–≤–µ–∑–¥–∞ = 1 –¥–µ–Ω—å –ø—Ä–µ–º–∏—É–º–∞",
                parse_mode="Markdown",
                reply_markup=custom_markup
            )
            return
        
        if amount_str == "back":
            # Go back to main donate screen
            await donate_command(update, context)
            return
        
        try:
            amount = int(amount_str)
        except ValueError:
            await query.edit_message_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞")
            return
        
        # Create and send invoice
        await send_donation_invoice(
            context.bot,
            chat_id,
            user,
            amount,
            query.message.message_id
        )


async def send_donation_invoice(bot, chat_id: int, user, stars_amount: int, reply_to_message_id: int = None):
    """Send Telegram Stars invoice for donation.
    
    Args:
        bot: Telegram bot instance
        chat_id: Chat ID to send invoice to
        user: User object
        stars_amount: Amount of stars to request
        reply_to_message_id: Message ID to reply to
    """
    try:
        # Create invoice payload for tracking
        payload = f"donate_{user.id}_{stars_amount}"
        
        # Determine premium days for description
        premium_days = stars_amount
        
        title = f"–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ {stars_amount}‚≠ê"
        description = (
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! –í—ã –ø–æ–ª—É—á–∏—Ç–µ {premium_days} "
            f"{'–¥–µ–Ω—å' if premium_days == 1 else '–¥–Ω—è' if premium_days < 5 else '–¥–Ω–µ–π'} "
            f"–ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø–∞ —Å –º–æ–¥–µ–ª—å—é o3."
        )
        
        # Create price in Telegram Stars
        prices = [LabeledPrice(label=f"{stars_amount} Telegram Stars", amount=stars_amount)]
        
        # Send invoice
        await bot.send_invoice(
            chat_id=chat_id,
            title=title,
            description=description,
            payload=payload,
            provider_token="",  # Empty for Telegram Stars
            currency="XTR",  # Telegram Stars currency
            prices=prices,
            reply_to_message_id=reply_to_message_id,
        )
        
        logger.info(f"Sent donation invoice: user_id={user.id}, amount={stars_amount} stars")
        
    except Exception as e:
        logger.error(f"Failed to send donation invoice: {e}")
        await bot.send_message(
            chat_id=chat_id,
            text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_to_message_id=reply_to_message_id
        )


async def handle_pre_checkout_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle pre-checkout query (approve payment)."""
    query = update.pre_checkout_query
    
    try:
        # Validate the payload
        if not query.invoice_payload.startswith("donate_"):
            logger.warning(f"Invalid invoice payload: {query.invoice_payload}")
            await query.answer(ok=False, error_message="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂")
            return
        
        # Parse payload
        parts = query.invoice_payload.split("_")
        if len(parts) != 3:
            logger.warning(f"Invalid payload format: {query.invoice_payload}")
            await query.answer(ok=False, error_message="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–ª–∞—Ç–µ–∂–∞")
            return
        
        user_id = int(parts[1])
        stars_amount = int(parts[2])
        
        # Validate user
        if user_id != query.from_user.id:
            logger.warning(f"User ID mismatch: payload={user_id}, actual={query.from_user.id}")
            await query.answer(ok=False, error_message="–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        # Validate amount
        if stars_amount <= 0 or stars_amount > 10000:  # Telegram Stars limit
            logger.warning(f"Invalid stars amount: {stars_amount}")
            await query.answer(ok=False, error_message="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞")
            return
        
        # Approve the payment
        await query.answer(ok=True)
        logger.info(f"Pre-checkout approved: user_id={user_id}, amount={stars_amount} stars")
        
    except Exception as e:
        logger.error(f"Error in pre-checkout query: {e}")
        await query.answer(ok=False, error_message="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")


async def handle_successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle successful payment."""
    payment = update.message.successful_payment
    user = update.effective_user
    
    try:
        # Extract payment details
        payment_id = payment.telegram_payment_charge_id
        stars_amount = payment.total_amount  # Amount in stars (XTR currency)
        invoice_payload = payment.invoice_payload
        
        logger.info(f"Processing successful payment: user_id={user.id}, payment_id={payment_id}, amount={stars_amount}")
        
        # Validate payload
        if not invoice_payload.startswith("donate_"):
            logger.error(f"Invalid payment payload: {invoice_payload}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")
            return
        
        # Add to database
        donors_db = get_donors_db()
        success = donors_db.add_donation(
            user_id=user.id,
            payment_id=payment_id,
            stars_amount=stars_amount,
            telegram_username=user.username,
            first_name=user.first_name,
            invoice_payload=invoice_payload
        )
        
        if success:
            # Get updated donor info
            donor_info = donors_db.get_donor_info(user.id)
            total_stars = donor_info['total_stars'] if donor_info else stars_amount
            
            # Create success message
            success_text = (
                f"üéâ *–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!*\n\n"
                f"üí´ –ü–æ–ª—É—á–µ–Ω–æ: {stars_amount}‚≠ê\n"
                f"üìä –í—Å–µ–≥–æ –∑–≤–µ–∑–¥: {total_stars}‚≠ê\n"
                f"üíé –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–µ–Ω –Ω–∞ {stars_amount} "
                f"{'–¥–µ–Ω—å' if stars_amount == 1 else '–¥–Ω—è' if stars_amount < 5 else '–¥–Ω–µ–π'}\n\n"
                f"üß† *–¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–∞ –º–æ–¥–µ–ª—å o3!*\n"
                f"–ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏ –ª—É—á—à–∏–π –∞–Ω–∞–ª–∏–∑ –ª–æ–∫–∞—Ü–∏–π\n\n"
                f"‚ú® –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ –¥–µ–ª–∞–µ—Ç–µ –ø—Ä–æ–µ–∫—Ç –ª—É—á—à–µ!"
            )
            
            await update.message.reply_text(success_text, parse_mode="Markdown")
            
            # Log for analytics
            logger.info(f"Donation processed successfully: user_id={user.id}, total_stars={total_stars}")
            
        else:
            logger.error(f"Failed to save donation to database: user_id={user.id}, payment_id={payment_id}")
            await update.message.reply_text(
                "‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. "
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å ID –ø–ª–∞—Ç–µ–∂–∞: " + payment_id
            )
    
    except Exception as e:
        logger.error(f"Error processing successful payment: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )


async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /stats command (for debugging/admin)."""
    try:
        donors_db = get_donors_db()
        stats = donors_db.get_stats()
        
        if not stats:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return
        
        stats_text = (
            "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞*\n\n"
            f"üë• –î–æ–Ω–∞—Ç–µ—Ä–æ–≤: {stats.get('total_donors', 0)}\n"
            f"üí∞ –í—Å–µ–≥–æ –¥–æ–Ω–∞—Ç–æ–≤: {stats.get('total_donations', 0)}\n"
            f"‚≠ê –°–æ–±—Ä–∞–Ω–æ –∑–≤–µ–∑–¥: {stats.get('total_stars', 0)}\n"
            f"üíé –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–º–∏—É–º: {stats.get('active_premium', 0)}"
        )
        
        await update.message.reply_text(stats_text, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Error in stats command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")