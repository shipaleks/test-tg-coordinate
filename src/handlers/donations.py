"""Donation handlers for Telegram Stars payments."""

import logging
import time
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    LabeledPrice,
    Update,
)
from telegram.ext import ContextTypes

from ..services.donors_db import get_donors_db

logger = logging.getLogger(__name__)


async def donate_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /donate command."""
    user = update.effective_user
    
    # Check current premium status
    donors_db = get_donors_db()
    is_premium = donors_db.is_premium_user(user.id)
    donor_info = donors_db.get_donor_info(user.id)
    
    # Create status text
    if donor_info:
        status_text = f"üéÅ *–î–æ–Ω–∞—Ç–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞*\nüìä –í—Å–µ–≥–æ –∑–≤–µ–∑–¥: {donor_info['total_stars']}‚≠ê\nüß† o3 –º–æ–¥–µ–ª—å –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è –∂–∏–≤—ã—Ö –ª–æ–∫–∞—Ü–∏–π\n\n"
    else:
        status_text = ""
    
    donate_text = (
        "üåü *–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç*\n\n"
        + status_text +
        "–í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç:\n"
        "‚Ä¢ ü§ñ –û–ø–ª–∞—á–∏–≤–∞—Ç—å OpenAI API –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤\n"
        "‚Ä¢ üöÄ –†–∞–∑–≤–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞\n"
        "‚Ä¢ üì° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä 24/7\n\n"
        "üíù *–õ—é–±–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–∞ –∏ –æ—á–µ–Ω—å —Ü–µ–Ω–∏—Ç—Å—è!*"
    )
    
    # Create donation buttons with increased amounts
    keyboard = [
        [
            InlineKeyboardButton("100‚≠ê", callback_data="donate_100"),
            InlineKeyboardButton("250‚≠ê", callback_data="donate_250"),
            InlineKeyboardButton("500‚≠ê", callback_data="donate_500"),
        ],
        [
            InlineKeyboardButton("üí∞ –î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data="donate_custom"),
        ],
    ]
    
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        donate_text, 
        parse_mode="Markdown", 
        reply_markup=reply_markup
    )


async def handle_donation_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle donation button callbacks."""
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    chat_id = query.message.chat_id
    
    
    # Handle donation amounts
    if query.data.startswith("donate_"):
        amount_str = query.data.replace("donate_", "")
        
        if amount_str == "custom":
            custom_keyboard = [
                [
                    InlineKeyboardButton("50‚≠ê", callback_data="donate_50"),
                    InlineKeyboardButton("150‚≠ê", callback_data="donate_150"),
                ],
                [
                    InlineKeyboardButton("1000‚≠ê", callback_data="donate_1000"),
                    InlineKeyboardButton("2000‚≠ê", callback_data="donate_2000"),
                ],
                [
                    InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="donate_back"),
                ],
            ]
            custom_markup = InlineKeyboardMarkup(custom_keyboard)
            
            await query.edit_message_text(
                "üí∞ *–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É:*\n\n"
                "‚ú® –õ—é–±–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—á–µ–Ω—å —Ü–µ–Ω–∏—Ç—Å—è!",
                parse_mode="Markdown",
                reply_markup=custom_markup
            )
            return
        
        if amount_str == "back":
            # Go back to main donate screen - we need to recreate the original message
            user = query.from_user
            donors_db = get_donors_db()
            is_premium = donors_db.is_premium_user(user.id)
            donor_info = donors_db.get_donor_info(user.id)
            
            # Create status text
            if donor_info:
                status_text = f"üéÅ *–î–æ–Ω–∞—Ç–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞*\nüìä –í—Å–µ–≥–æ –∑–≤–µ–∑–¥: {donor_info['total_stars']}‚≠ê\nüß† o3 –º–æ–¥–µ–ª—å –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è –∂–∏–≤—ã—Ö –ª–æ–∫–∞—Ü–∏–π\n\n"
            else:
                status_text = ""
            
            donate_text = (
                "üåü *–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç*\n\n"
                + status_text +
                "–í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç:\n"
                "‚Ä¢ ü§ñ –û–ø–ª–∞—á–∏–≤–∞—Ç—å OpenAI API –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤\n"
                "‚Ä¢ üöÄ –†–∞–∑–≤–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞\n"
                "‚Ä¢ üì° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä 24/7\n\n"
                "üíù *–õ—é–±–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–∞ –∏ –æ—á–µ–Ω—å —Ü–µ–Ω–∏—Ç—Å—è!*"
            )
            
            # Create donation buttons
            keyboard = [
                [
                    InlineKeyboardButton("100‚≠ê", callback_data="donate_100"),
                    InlineKeyboardButton("250‚≠ê", callback_data="donate_250"),
                    InlineKeyboardButton("500‚≠ê", callback_data="donate_500"),
                ],
                [
                    InlineKeyboardButton("üí∞ –î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data="donate_custom"),
                ],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                donate_text, 
                parse_mode="Markdown", 
                reply_markup=reply_markup
            )
            return
        
        try:
            amount = int(amount_str)
        except ValueError:
            await query.edit_message_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞")
            return
        
        # Create and send invoice
        await send_donation_invoice(
            context.bot,
            chat_id,
            user,
            amount,
            query.message.message_id
        )


async def send_donation_invoice(bot, chat_id: int, user, stars_amount: int, reply_to_message_id: int = None):
    """Send Telegram Stars invoice for donation.
    
    Args:
        bot: Telegram bot instance
        chat_id: Chat ID to send invoice to
        user: User object
        stars_amount: Amount of stars to request
        reply_to_message_id: Message ID to reply to
    """
    try:
        # Create invoice payload for tracking
        payload = f"donate_{user.id}_{stars_amount}"
        
        title = f"–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ {stars_amount}‚≠ê"
        description = f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–æ–µ–∫—Ç–∞! –í–∞—à–∏ {stars_amount} –∑–≤–µ–∑–¥ –ø–æ–º–æ–≥—É—Ç —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –±–æ—Ç–∞."
        
        # Create price in Telegram Stars
        prices = [LabeledPrice(label=f"{stars_amount} Telegram Stars", amount=stars_amount)]
        
        # Send invoice
        await bot.send_invoice(
            chat_id=chat_id,
            title=title,
            description=description,
            payload=payload,
            provider_token="",  # Empty for Telegram Stars
            currency="XTR",  # Telegram Stars currency
            prices=prices,
            reply_to_message_id=reply_to_message_id,
        )
        
        logger.info(f"Sent donation invoice: user_id={user.id}, amount={stars_amount} stars")
        
    except Exception as e:
        logger.error(f"Failed to send donation invoice: {e}")
        await bot.send_message(
            chat_id=chat_id,
            text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_to_message_id=reply_to_message_id
        )


async def handle_pre_checkout_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle pre-checkout query (approve payment)."""
    query = update.pre_checkout_query
    
    try:
        # Validate the payload
        if not query.invoice_payload.startswith("donate_"):
            logger.warning(f"Invalid invoice payload: {query.invoice_payload}")
            await query.answer(ok=False, error_message="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂")
            return
        
        # Parse payload
        parts = query.invoice_payload.split("_")
        if len(parts) != 3:
            logger.warning(f"Invalid payload format: {query.invoice_payload}")
            await query.answer(ok=False, error_message="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–ª–∞—Ç–µ–∂–∞")
            return
        
        user_id = int(parts[1])
        stars_amount = int(parts[2])
        
        # Validate user
        if user_id != query.from_user.id:
            logger.warning(f"User ID mismatch: payload={user_id}, actual={query.from_user.id}")
            await query.answer(ok=False, error_message="–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        # Validate amount
        if stars_amount <= 0 or stars_amount > 10000:  # Telegram Stars limit
            logger.warning(f"Invalid stars amount: {stars_amount}")
            await query.answer(ok=False, error_message="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞")
            return
        
        # Approve the payment
        await query.answer(ok=True)
        logger.info(f"Pre-checkout approved: user_id={user_id}, amount={stars_amount} stars")
        
    except Exception as e:
        logger.error(f"Error in pre-checkout query: {e}")
        await query.answer(ok=False, error_message="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")


async def handle_successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle successful payment."""
    payment = update.message.successful_payment
    user = update.effective_user
    
    try:
        # Extract payment details
        payment_id = payment.telegram_payment_charge_id
        stars_amount = payment.total_amount  # Amount in stars (XTR currency)
        invoice_payload = payment.invoice_payload
        
        logger.info(f"Processing successful payment: user_id={user.id}, payment_id={payment_id}, amount={stars_amount}")
        
        # Validate payload
        if not invoice_payload.startswith("donate_"):
            logger.error(f"Invalid payment payload: {invoice_payload}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")
            return
        
        # Add to database
        donors_db = get_donors_db()
        logger.info(f"Attempting to add donation to database: user_id={user.id}, payment_id={payment_id}, stars={stars_amount}")
        
        success = donors_db.add_donation(
            user_id=user.id,
            payment_id=payment_id,
            stars_amount=stars_amount,
            telegram_username=user.username,
            first_name=user.first_name,
            invoice_payload=invoice_payload
        )
        
        logger.info(f"Donation database operation result: success={success}")
        
        if success:
            # Get updated donor info
            donor_info = donors_db.get_donor_info(user.id)
            total_stars = donor_info['total_stars'] if donor_info else stars_amount
            
            # Check if this is first donation (show bonus message)
            is_first_donation = total_stars == stars_amount
            
            if is_first_donation:
                # First donation - explain the bonus as gratitude
                success_text = (
                    f"üéâ *–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!*\n\n"
                    f"üí´ –ü–æ–ª—É—á–µ–Ω–æ: {stars_amount}‚≠ê\n\n"
                    f"üéÅ *–í –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –º—ã –≤–∫–ª—é—á–∏–ª–∏ –≤–∞–º –±–æ–ª–µ–µ –º–æ—â–Ω—ã–µ –º–æ–¥–µ–ª–∏!*\n\n"
                    f"üß† **–î–ª—è –∂–∏–≤—ã—Ö –ª–æ–∫–∞—Ü–∏–π —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–∞ –º–æ–¥–µ–ª—å o3:**\n"
                    f"‚Ä¢ –ë–æ–ª–µ–µ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –º–µ—Å—Ç –ø—Ä–∏ –ø—Ä–æ–≥—É–ª–∫–∞—Ö\n"
                    f"‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–µ–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç—ã\n"
                    f"‚Ä¢ –õ—É—á—à–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ª–æ–∫–∞—Ü–∏–∏\n\n"
                    f"‚ú® –≠—Ç–æ –Ω–∞—à —Å–ø–æ—Å–æ–± —Å–∫–∞–∑–∞—Ç—å —Å–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç–µ –ø—Ä–æ–µ–∫—Ç—É —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è!"
                )
            else:
                # Repeat donation - simpler thanks
                success_text = (
                    f"üéâ *–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!*\n\n"
                    f"üí´ –ü–æ–ª—É—á–µ–Ω–æ: {stars_amount}‚≠ê\n"
                    f"üìä –í—Å–µ–≥–æ –∑–≤–µ–∑–¥: {total_stars}‚≠ê\n\n"
                    f"üôè –í–∞—à–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—á–µ–Ω—å —Ü–µ–Ω–Ω–∞!\n"
                    f"‚ú® –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏!"
                )
            
            
            await update.message.reply_text(success_text, parse_mode="Markdown")
            
            # Log for analytics
            logger.info(f"Donation processed successfully: user_id={user.id}, total_stars={total_stars}")
            
        else:
            logger.error(f"Failed to save donation to database: user_id={user.id}, payment_id={payment_id}")
            await update.message.reply_text(
                "‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. "
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å ID –ø–ª–∞—Ç–µ–∂–∞: " + payment_id
            )
    
    except Exception as e:
        logger.error(f"Error processing successful payment: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )


async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /stats command (for debugging/admin)."""
    try:
        donors_db = get_donors_db()
        stats = donors_db.get_stats()
        
        if not stats:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return
        
        stats_text = (
            "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞*\n\n"
            f"üë• –î–æ–Ω–∞—Ç–µ—Ä–æ–≤: {stats.get('total_donors', 0)}\n"
            f"üí∞ –í—Å–µ–≥–æ –¥–æ–Ω–∞—Ç–æ–≤: {stats.get('total_donations', 0)}\n"
            f"‚≠ê –°–æ–±—Ä–∞–Ω–æ –∑–≤–µ–∑–¥: {stats.get('total_stars', 0)}\n"
            f"üéÅ –° –±–æ–Ω—É—Å–æ–º: {stats.get('active_premium', 0)}"
        )
        
        await update.message.reply_text(stats_text, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Error in stats command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


async def dbtest_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle /dbtest command - database diagnostics."""
    try:
        donors_db = get_donors_db()
        user_id = update.effective_user.id
        
        # Test database connection and basic operations
        test_results = []
        
        # 1. Check database file location
        db_path = str(donors_db.db_path)
        test_results.append(f"üìÅ *Database path:* `{db_path}`")
        
        # 2. Check if file exists and is writable
        import os
        if os.path.exists(db_path):
            if os.access(db_path, os.W_OK):
                test_results.append("‚úÖ Database file exists and writable")
            else:
                test_results.append("‚ö†Ô∏è Database file exists but not writable")
        else:
            test_results.append("üÜï Database file will be created on first use")
        
        # 3. Test basic database operations
        try:
            # Get user info (should work even for non-donors)
            donor_info = donors_db.get_donor_info(user_id)
            if donor_info:
                test_results.append(f"üë§ *Your donor status:* Found (‚≠ê{donor_info['total_stars']})")
                
                # Check premium status with detailed timestamp info
                is_premium = donors_db.is_premium_user(user_id)
                status = "üéÅ Enhanced access active" if is_premium else "üì± Standard access"
                test_results.append(f"üß† *Model access:* {status}")
                
                # Show detailed premium info
                current_time = int(time.time())
                premium_expires = donor_info.get('premium_expires', 0)
                if premium_expires > 0:
                    if premium_expires > current_time:
                        days_left = (premium_expires - current_time) // (24 * 60 * 60)
                        test_results.append(f"‚è∞ *Premium expires:* {days_left} days from now")
                    else:
                        test_results.append(f"‚è∞ *Premium status:* Expired")
                
                # Get donation history
                history = donors_db.get_donation_history(user_id)
                test_results.append(f"üìú *Donation history:* {len(history)} transactions")
                
                # Show latest donation if exists
                if history:
                    latest = history[0]  # Most recent first
                    test_results.append(f"üí≥ *Latest donation:* {latest['stars_amount']}‚≠ê on {latest['payment_date']}")
            else:
                test_results.append("üë§ *Your status:* Not a donor yet")
                test_results.append("üß† *Model access:* Standard (GPT-4.1 static, o4-mini live)")
                
                # Check if there are any donations for this user in donations table
                import sqlite3
                with sqlite3.connect(donors_db.db_path) as conn:
                    donations_count = conn.execute(
                        "SELECT COUNT(*) FROM donations WHERE user_id = ?", 
                        (user_id,)
                    ).fetchone()[0]
                    if donations_count > 0:
                        test_results.append(f"‚ö†Ô∏è *Found {donations_count} donations in donations table but no donor record!*")
            
            # Get overall stats
            stats = donors_db.get_stats()
            test_results.append(f"üìä *Database stats:* {stats.get('total_donors', 0)} donors, {stats.get('total_donations', 0)} transactions")
            
            # Check raw table counts for debugging
            import sqlite3
            with sqlite3.connect(donors_db.db_path) as conn:
                donors_count = conn.execute("SELECT COUNT(*) FROM donors").fetchone()[0]
                donations_count = conn.execute("SELECT COUNT(*) FROM donations").fetchone()[0]
                test_results.append(f"üîç *Raw counts:* {donors_count} donors, {donations_count} donations in tables")
            
            test_results.append("‚úÖ All database operations working correctly")
            
        except Exception as db_error:
            test_results.append(f"‚ùå Database operation failed: {str(db_error)}")
        
        # 4. Check Railway volume and environment
        import os
        railway_env_vars = {
            "RAILWAY_ENVIRONMENT_NAME": os.environ.get("RAILWAY_ENVIRONMENT_NAME", "Not set"),
            "RAILWAY_PROJECT_ID": os.environ.get("RAILWAY_PROJECT_ID", "Not set"),
            "RAILWAY_SERVICE_ID": os.environ.get("RAILWAY_SERVICE_ID", "Not set"),
            "RAILWAY_VOLUME_ID": os.environ.get("RAILWAY_VOLUME_ID", "Not set")
        }
        
        if "/data" in db_path:
            test_results.append("üöÄ *Deployment:* Railway with persistent volume")
            if os.path.exists("/data") and os.access("/data", os.W_OK):
                test_results.append("‚úÖ Railway volume mounted and accessible")
            else:
                test_results.append("‚ö†Ô∏è Railway volume path not accessible")
        else:
            test_results.append("üíª *Deployment:* Local development mode")
            # Show Railway environment variables for debugging
            if any(v != "Not set" for v in railway_env_vars.values()):
                test_results.append("‚ö†Ô∏è *Railway env detected but using local DB!*")
                for var, value in railway_env_vars.items():
                    if value != "Not set":
                        test_results.append(f"  - {var}: {value[:20]}...")
            
        # Check if /data exists at all
        if os.path.exists("/data"):
            test_results.append(f"üìÇ */data exists:* Yes (writable: {os.access('/data', os.W_OK)})")
        else:
            test_results.append("üìÇ */data exists:* No")
        
        # Format results
        test_text = "üîß *Database Diagnostics*\n\n" + "\n".join(test_results)
        
        await update.message.reply_text(test_text, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Error in dbtest command: {e}")
        await update.message.reply_text(
            f"‚ùå *Database test failed*\n\n"
            f"Error: `{str(e)}`\n\n"
            f"This might indicate a database configuration issue.",
            parse_mode="Markdown"
        )