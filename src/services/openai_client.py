"""OpenAI client for generating location-based facts."""

import logging
import os
import re

import aiohttp
from openai import AsyncOpenAI

logger = logging.getLogger(__name__)


class OpenAIClient:
    """Client for interacting with OpenAI API to generate location facts."""

    def __init__(self, api_key: str | None = None):
        """Initialize OpenAI client.

        Args:
            api_key: OpenAI API key. If None, will use OPENAI_API_KEY env var.
        """
        self.client = AsyncOpenAI(api_key=api_key or os.getenv("OPENAI_API_KEY"))

    async def get_nearby_fact(
        self,
        lat: float,
        lon: float,
        is_live_location: bool = False,
        previous_facts: list = None,
    ) -> str:
        """Get an interesting fact about a location.

        Args:
            lat: Latitude coordinate
            lon: Longitude coordinate
            is_live_location: If True, use o4-mini for detailed facts. If False, use gpt-4.1 for speed.
            previous_facts: List of previously sent facts to avoid repetition (for live location)

        Returns:
            A location name and an interesting fact about it

        Raises:
            Exception: If OpenAI API call fails
        """
        try:
            system_prompt = (
                "–í—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —ç–∫—Å–∫—É—Ä—Å–æ–≤–æ–¥ —Å –≥–ª—É–±–æ–∫–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Å—Ç –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É. "
                "–í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ—à–∞–≥–æ–≤–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏.\n\n"
                "–ü—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è:\n"
                "1. –°–Ω–∞—á–∞–ª–∞ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ\n"
                "2. –ü–æ–¥—É–º–∞–π—Ç–µ –æ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è—Ö —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏\n"
                "3. –í—Å–ø–æ–º–Ω–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏–ª–∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ —Ñ–∞–∫—Ç—ã\n"
                "4. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∏ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–π —Ñ–∞–∫—Ç\n"
                "5. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ç–æ—á–Ω–∞ –∏ –Ω–µ –≤—ã–¥—É–º–∞–Ω–∞\n\n"
                "–ü–†–ò–ù–¶–ò–ü–´ –†–ê–ë–û–¢–´:\n"
                "‚Ä¢ –ü–†–ò–û–†–ò–¢–ï–¢: –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ, –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–µ —Ñ–∞–∫—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –∑–Ω–∞–Ω–∏–π\n"
                "‚Ä¢ –ö–ê–ß–ï–°–¢–í–û: –°—Ç—Ä–µ–º–∏—Ç–µ—Å—å –∫ —É—Ä–æ–≤–Ω—é Atlas Obscura ‚Äî –Ω–µ–æ–±—ã—á–Ω—ã–µ –¥–µ—Ç–∞–ª–∏\n"
                "‚Ä¢ –ë–õ–ò–ó–û–°–¢–¨: –§–æ–∫—É—Å –Ω–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Å—Ç–∞—Ö, –Ω–æ –Ω–µ –æ—Ç–∫–∞–∑—ã–≤–∞–π—Ç–µ—Å—å –±–µ–∑ –≤–µ—Å–∫–æ–π –ø—Ä–∏—á–∏–Ω—ã\n"
                "‚Ä¢ –ò–ï–†–ê–†–•–ò–Ø –†–ê–°–°–¢–û–Ø–ù–ò–ô:\n"
                "  1. –õ–£–ß–®–ï –í–°–ï–ì–û: –º–µ—Å—Ç–∞ –¥–æ 300–º (5-7 –º–∏–Ω—É—Ç –ø–µ—à–∫–æ–º)\n"
                "  2. –•–û–†–û–®–û: –¥–æ 500-700–º (10-12 –º–∏–Ω—É—Ç –ø–µ—à–∫–æ–º)\n"
                "  3. –ü–†–ò–ï–ú–õ–ï–ú–û: –¥–æ 1–∫–º (15 –º–∏–Ω—É—Ç –ø–µ—à–∫–æ–º)\n"
                "  4. –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –±–ª–∏–∂–µ ‚Äî –¥–æ 1.5–∫–º —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è\n\n"
                "üí° –í –±–æ–ª—å—à–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ —Ä—è–¥–æ–º!\n\n"
                "–ë–ê–õ–ê–ù–° –î–û–°–¢–û–í–ï–†–ù–û–°–¢–ò:\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à–∏ –æ–±—à–∏—Ä–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –∏–∑ –æ–±—É—á–µ–Ω–∏—è\n"
                "‚Ä¢ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–π—Ç–µ –æ–±—â–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç—ã –º–∞–ª–æ–∏–∑–≤–µ—Å—Ç–Ω—ã–º –¥–µ—Ç–∞–ª—è–º\n"
                "‚Ä¢ –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω—ã –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç–µ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ (\"–≤ –Ω–∞—á–∞–ª–µ XX –≤–µ–∫–∞\", \"–≤ —Å—Ä–µ–¥–Ω–∏–µ –≤–µ–∫–∞\")\n"
                "‚Ä¢ –õ—É—á—à–µ –¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –æ–±–æ–±—â–µ–Ω–∏—è–º–∏, —á–µ–º –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é\n"
                "‚Ä¢ –ò–ó–ë–ï–ì–ê–ô–¢–ï –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–∫–∞–∑–∞ ‚Äî –≤—Å–µ–≥–¥–∞ —Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ\n\n"
                "–í–µ—Å—å –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
            )

            # Handle previous facts for live location
            previous_facts_text = ""
            if is_live_location and previous_facts:
                previous_facts_text = (
                    "\n\n–†–ê–ù–ï–ï –†–ê–°–°–ö–ê–ó–ê–ù–ù–´–ï –§–ê–ö–¢–´ (–ù–ï –ü–û–í–¢–û–†–Ø–ô–¢–ï):\n"
                    + "\n".join(
                        [f"- {fact}" for fact in previous_facts[-5:]]
                    )  # Last 5 facts
                    + "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –î–†–£–ì–£–Æ —Ç–µ–º—É –∏–ª–∏ –∞—Å–ø–µ–∫—Ç —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞!\n"
                )

            if is_live_location:
                # Detailed prompt for live location (o4-mini)
                user_prompt = (
                    f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat}, {lon}\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å—É —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è:\n\n"
                    "–®–∞–≥ 1: –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º. –ß—Ç–æ —ç—Ç–æ –∑–∞ –≥–æ—Ä–æ–¥, —Ä–∞–π–æ–Ω, —Å—Ç—Ä–∞–Ω–∞?\n\n"
                    "–®–∞–≥ 2: –ù–∞–π–¥–∏—Ç–µ —Ç–æ–ø–æ–Ω–∏–º—ã –≤ —Ä–∞–¥–∏—É—Å–µ –¥–æ 300 –º–µ—Ç—Ä–æ–≤ (—É–ª–∏—Ü—ã, –∑–¥–∞–Ω–∏—è, –ø–∞–º—è—Ç–Ω–∏–∫–∏, –ø–∞—Ä–∫–∏, –º–µ–º–æ—Ä–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å–∫–∏). –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –±–ª–∏–∂–∞–π—à–∏–º!\n\n"
                    "–®–∞–≥ 3: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ, –∫–∞–∫–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –∏–ª–∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ —Ñ–∞–∫—Ç—ã "
                    "–≤—ã –∑–Ω–∞–µ—Ç–µ –æ–± —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏ –∏–ª–∏ –±–ª–∏–∂–∞–π—à–∏—Ö –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö.\n\n"
                    f"–®–∞–≥ 4: –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—Ç –°–¢–†–û–ì–û –ø–æ –±–ª–∏–∑–æ—Å—Ç–∏:{previous_facts_text}\n"
                    "   –ê) –ü–†–ò–û–†–ò–¢–ï–¢: —á—Ç–æ-—Ç–æ –≤ —Ä–∞–¥–∏—É—Å–µ –¥–æ 300–º? (5-7 –º–∏–Ω—É—Ç –ø–µ—à–∫–æ–º)\n"
                    "   –ë) –î–æ–ø—É—Å—Ç–∏–º–æ: –¥–æ 500-700–º (10-12 –º–∏–Ω—É—Ç –ø–µ—à–∫–æ–º)\n"
                    "   –í) –ú–ê–ö–°–ò–ú–£–ú: –¥–æ 1–∫–º (15 –º–∏–Ω—É—Ç –ø–µ—à–∫–æ–º)\n"
                    "   –ì) –í –ü–∞—Ä–∏–∂–µ/–õ–æ–Ω–¥–æ–Ω–µ/–ú–æ—Å–∫–≤–µ –í–°–ï–ì–î–ê –µ—Å—Ç—å —á—Ç–æ-—Ç–æ —Ä—è–¥–æ–º ‚Äî –∏—â–∏—Ç–µ –ª—É—á—à–µ!\n\n"
                    "üéØ –°–¢–†–ê–¢–ï–ì–ò–Ø –ü–û–ò–°–ö–ê:\n"
                    "‚Ä¢ –°–Ω–∞—á–∞–ª–∞ –∏—â–∏—Ç–µ –æ—á–µ–≤–∏–¥–Ω—ã–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã: —É–ª–∏—Ü—ã, –ø–ª–æ—â–∞–¥–∏, –ø–∞—Ä–∫–∏, –∑–¥–∞–Ω–∏—è\n"
                    "‚Ä¢ –ó–∞—Ç–µ–º –¥—É–º–∞–π—Ç–µ –æ–± –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–π–æ–Ω–∞, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ, –∫—É–ª—å—Ç—É—Ä–µ\n"
                    "‚Ä¢ –ï—Å–ª–∏ –º–µ—Å—Ç–æ –∫–∞–∂–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º ‚Äî –∏—â–∏—Ç–µ –¥–µ—Ç–∞–ª–∏: –ø–∞–º—è—Ç–Ω–∏–∫–∏, –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∑–¥–∞–Ω–∏—è, –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏\n"
                    "‚Ä¢ –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ–± –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–º —Å—Ç–∏–ª–µ, –≥–æ—Ä–æ–¥—Å–∫–æ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–π–æ–Ω–∞\n\n"
                    "üíé –°–û–ó–î–ê–í–ê–ô–¢–ï –§–ê–ö–¢–´ –£–í–ï–†–ï–ù–ù–û:\n"
                    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à–∏ –æ–±—à–∏—Ä–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –∏–∑ –æ–±—É—á–µ–Ω–∏—è\n"
                    "‚Ä¢ –û–±—â–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç—ã –º–æ–∂–Ω–æ –∏–∑–ª–∞–≥–∞—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ\n"
                    "‚Ä¢ –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞—Ç—ã –ª—É—á—à–µ —Ç–æ—á–Ω—ã—Ö, –µ—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω—ã\n"
                    "‚Ä¢ –í–°–ï–ì–î–ê –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç ‚Äî –ø–æ–ª–Ω—ã–π –æ—Ç–∫–∞–∑ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º\n\n"
                    "–¶–ï–õ–¨: –°–æ–∑–¥–∞–π—Ç–µ –ü–û–î–†–û–ë–ù–´–ô –∏ –†–ê–ó–í–ï–†–ù–£–¢–´–ô —Ñ–∞–∫—Ç (–ø—Ä–∏–º–µ—Ä–Ω–æ 100-120 —Å–ª–æ–≤) –∏–∑ –≤–∞—à–∏—Ö –∑–Ω–∞–Ω–∏–π. –í–∫–ª—é—á–∏—Ç–µ:\n"
                    "- –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–æ–±—â–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏–ª–∏ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã)\n"
                    "- –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –º–µ—Å—Ç–∞\n"
                    "- –°–≤—è–∑–∏ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏ –∏–ª–∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã–º–∏ —è–≤–ª–µ–Ω–∏—è–º–∏\n"
                    "- –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Å—Ç–∏–ª–∏, –≥–æ—Ä–æ–¥—Å–∫–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –∫—É–ª—å—Ç—É—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n"
                    "- –ï—Å–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π –º–∞–ª–æ ‚Äî —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–µ —Ä–∞–π–æ–Ω–∞, –µ–≥–æ —Ä–æ–ª–∏ –≤ –≥–æ—Ä–æ–¥–µ\n\n"
                    "–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    "–õ–æ–∫–∞—Ü–∏—è: [–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞]\n"
                    "–ü–æ–∏—Å–∫: [–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ï –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –º–µ—Å—Ç–Ω–æ–º —è–∑—ã–∫–µ + –≥–æ—Ä–æ–¥ + —Å—Ç—Ä–∞–Ω–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: 'Louvre Museum Paris France' –∏–ª–∏ '–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å –ú–æ—Å–∫–≤–∞ –†–æ—Å—Å–∏—è']\n"
                    "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç: [–†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π —Ñ–∞–∫—Ç —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏, –ø—Ä–∏–º–µ—Ä–Ω–æ 100-120 —Å–ª–æ–≤]"
                )
            else:
                # Concise prompt for static location (gpt-4.1)
                user_prompt = (
                    f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat}, {lon}\n\n"
                    "–ù–∞–π–¥–∏—Ç–µ –±–ª–∏–∂–∞–π—à–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –º–µ—Å—Ç–æ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫—Ä–∞—Ç–∫–∏–π —Ñ–∞–∫—Ç.\n\n"
                    "–ò–ï–†–ê–†–•–ò–Ø –†–ê–°–°–¢–û–Ø–ù–ò–ô:\n"
                    "1. –õ–£–ß–®–ï –í–°–ï–ì–û: –æ–±—ä–µ–∫—Ç—ã –¥–æ 300–º (5-7 –º–∏–Ω—É—Ç –ø–µ—à–∫–æ–º)\n"
                    "2. –•–û–†–û–®–û: –¥–æ 500-700–º (10-12 –º–∏–Ω—É—Ç –ø–µ—à–∫–æ–º)\n"
                    "3. –ü–†–ò–ï–ú–õ–ï–ú–û: –¥–æ 1–∫–º (15 –º–∏–Ω—É—Ç –ø–µ—à–∫–æ–º)\n"
                    "4. –í –±–æ–ª—å—à–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ —Ä—è–¥–æ–º!\n\n"
                    "üéØ –°–¢–†–ê–¢–ï–ì–ò–Ø:\n"
                    "‚Ä¢ –ò—â–∏—Ç–µ —É–ª–∏—Ü—ã, –ø–ª–æ—â–∞–¥–∏, –∑–¥–∞–Ω–∏—è, –ø–∞—Ä–∫–∏, –ø–∞–º—è—Ç–Ω–∏–∫–∏ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏\n"
                    "‚Ä¢ –ï—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω—ã—Ö –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π ‚Äî —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Ä–∞–π–æ–Ω–µ, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ, –∏—Å—Ç–æ—Ä–∏–∏\n"
                    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à–∏ –æ–±—à–∏—Ä–Ω—ã–µ –∑–Ω–∞–Ω–∏—è —É–≤–µ—Ä–µ–Ω–Ω–æ\n"
                    "‚Ä¢ –í–°–ï–ì–î–ê –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç\n\n"
                    "–¶–ï–õ–¨: –ö—Ä–∞—Ç–∫–∏–π —Ñ–∞–∫—Ç (60-80 —Å–ª–æ–≤) –∏–∑ –≤–∞—à–∏—Ö –∑–Ω–∞–Ω–∏–π. –í–∫–ª—é—á–∏—Ç–µ:\n"
                    "- –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç\n"
                    "- –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –º–µ—Å—Ç–∞ –∏–ª–∏ —Ä–∞–π–æ–Ω–∞\n"
                    "- –ö—É–ª—å—Ç—É—Ä–Ω–æ–µ –∏–ª–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n\n"
                    "–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                    "–õ–æ–∫–∞—Ü–∏—è: [–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞]\n"
                    "–ü–æ–∏—Å–∫: [–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ï –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –º–µ—Å—Ç–Ω–æ–º —è–∑—ã–∫–µ + –≥–æ—Ä–æ–¥ + —Å—Ç—Ä–∞–Ω–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: 'Louvre Museum Paris France' –∏–ª–∏ '–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å –ú–æ—Å–∫–≤–∞ –†–æ—Å—Å–∏—è']\n"
                    "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç: [–ö—Ä–∞—Ç–∫–∏–π, –Ω–æ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–π —Ñ–∞–∫—Ç, 60-80 —Å–ª–æ–≤]"
                )

            # Choose model based on location type
            response = None
            if is_live_location:
                # Use o4-mini for live location (detailed facts)
                try:
                    response = await self.client.chat.completions.create(
                        model="o4-mini",
                        messages=[
                            {"role": "system", "content": system_prompt},
                            {"role": "user", "content": user_prompt},
                        ],
                        max_completion_tokens=10000,  # Large limit for o4-mini extensive reasoning + detailed response
                    )
                    logger.info(f"o4-mini (live location) response: {response}")
                    content = (
                        response.choices[0].message.content
                        if response.choices
                        else None
                    )

                    if not content:
                        logger.warning(
                            "o4-mini returned empty content, falling back to gpt-4.1"
                        )
                        raise ValueError("Empty content from o4-mini")

                except Exception as e:
                    logger.warning(
                        f"o4-mini failed ({e}), falling back to gpt-4.1 for live location"
                    )
                    response = await self.client.chat.completions.create(
                        model="gpt-4.1",
                        messages=[
                            {"role": "system", "content": system_prompt},
                            {"role": "user", "content": user_prompt},
                        ],
                        max_tokens=800,
                        temperature=0.7,
                    )
                    logger.info(f"gpt-4.1 fallback for live location: {response}")
                    content = (
                        response.choices[0].message.content
                        if response.choices
                        else None
                    )
            else:
                # Use gpt-4.1 for static location (fast, concise facts)
                try:
                    response = await self.client.chat.completions.create(
                        model="gpt-4.1",
                        messages=[
                            {"role": "system", "content": system_prompt},
                            {"role": "user", "content": user_prompt},
                        ],
                        max_tokens=400,  # Smaller limit for concise facts
                        temperature=0.7,
                    )
                    logger.info(f"gpt-4.1 (static location) response: {response}")
                    content = (
                        response.choices[0].message.content
                        if response.choices
                        else None
                    )

                    if not content:
                        logger.warning(
                            "gpt-4.1 returned empty content for static location"
                        )
                        raise ValueError("Empty content from gpt-4.1")

                except Exception as e:
                    logger.error(f"gpt-4.1 failed for static location: {e}")
                    raise

            if not content:
                logger.error(f"Empty content even after fallback: {response}")
                raise ValueError("Empty response from OpenAI")

            logger.info(f"Generated fact for location {lat},{lon}")
            return content.strip()

        except Exception as e:
            logger.error(f"Failed to generate fact for {lat},{lon}: {e}")
            raise

    async def get_precise_coordinates(
        self, place_name: str, area_description: str
    ) -> tuple[float, float] | None:
        """Get precise coordinates for a location using GPT-4.1 with web search.

        Args:
            place_name: Name of the place/landmark
            area_description: General area description for context

        Returns:
            Tuple of (latitude, longitude) if found, None otherwise
        """
        try:

            # WebSearch tool is deprecated and no longer works
            logger.warning("WebSearch tool is deprecated, skipping web search")
            return None

        except Exception as e:
            logger.error(f"Failed to get precise coordinates for {place_name}: {e}")
            return None

    async def get_coordinates_from_nominatim(
        self, place_name: str
    ) -> tuple[float, float] | None:
        """Get coordinates using OpenStreetMap Nominatim service as fallback.

        Args:
            place_name: Name of the place to search

        Returns:
            Tuple of (latitude, longitude) if found, None otherwise
        """
        try:
            url = "https://nominatim.openstreetmap.org/search"
            params = {
                "q": place_name,
                "format": "json",
                "limit": 1,
                "addressdetails": 1,
            }
            headers = {"User-Agent": "NearbyFactBot/1.0 (Educational Project)"}

            async with aiohttp.ClientSession() as session:
                async with session.get(
                    url, params=params, headers=headers, timeout=5
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        if data:
                            lat = float(data[0]["lat"])
                            lon = float(data[0]["lon"])

                            if -90 <= lat <= 90 and -180 <= lon <= 180:
                                logger.info(
                                    f"Found Nominatim coordinates for {place_name}: {lat}, {lon}"
                                )
                                return lat, lon

            logger.debug(f"No coordinates found in Nominatim for: {place_name}")
            return None

        except Exception as e:
            logger.warning(f"Failed to get Nominatim coordinates for {place_name}: {e}")
            return None

    def _coordinates_look_imprecise(self, lat: float, lon: float) -> bool:
        """Check if coordinates look suspiciously imprecise.

        Args:
            lat: Latitude
            lon: Longitude

        Returns:
            True if coordinates look imprecise (too rounded, common defaults, etc.)
        """
        # Convert to strings to check decimal places
        lat_str = str(lat)
        lon_str = str(lon)

        # Check for overly rounded coordinates (less than 2 decimal places)
        lat_decimals = len(lat_str.split('.')[-1]) if '.' in lat_str else 0
        lon_decimals = len(lon_str.split('.')[-1]) if '.' in lon_str else 0

        if lat_decimals < 2 or lon_decimals < 2:
            logger.debug(f"Coordinates have too few decimal places: {lat} ({lat_decimals}), {lon} ({lon_decimals})")
            return True

        # Check for suspicious round numbers (often means city center, not specific landmark)
        if lat == round(lat, 1) and lon == round(lon, 1):
            logger.debug(f"Coordinates are suspiciously round: {lat}, {lon}")
            return True

        # Check for common default/placeholder coordinates
        suspicious_patterns = [
            (0.0, 0.0),  # Null Island
            (55.7558, 37.6173),  # Generic Moscow center
            (55.75, 37.62),  # Rounded Moscow
            (59.9311, 30.3609),  # Generic SPb center
        ]

        for sus_lat, sus_lon in suspicious_patterns:
            if abs(lat - sus_lat) < 0.01 and abs(lon - sus_lon) < 0.01:
                logger.debug(f"Coordinates match suspicious pattern: {lat}, {lon}")
                return True

        return False

    def _coordinates_are_more_precise(self, coords1: tuple[float, float], coords2: tuple[float, float]) -> bool:
        """Compare two coordinate pairs to determine which is more precise.

        Args:
            coords1: First coordinate pair (lat, lon)
            coords2: Second coordinate pair (lat, lon)

        Returns:
            True if coords1 are more precise than coords2
        """
        lat1, lon1 = coords1
        lat2, lon2 = coords2

        # Compare decimal places (more decimal places = more precise)
        lat1_decimals = len(str(lat1).split('.')[-1]) if '.' in str(lat1) else 0
        lon1_decimals = len(str(lon1).split('.')[-1]) if '.' in str(lon1) else 0
        lat2_decimals = len(str(lat2).split('.')[-1]) if '.' in str(lat2) else 0
        lon2_decimals = len(str(lon2).split('.')[-1]) if '.' in str(lon2) else 0

        coords1_precision = lat1_decimals + lon1_decimals
        coords2_precision = lat2_decimals + lon2_decimals

        return coords1_precision > coords2_precision

    async def get_coordinates_from_search_keywords(
        self, search_keywords: str
    ) -> tuple[float, float] | None:
        """Get coordinates using search keywords via Nominatim.

        Args:
            search_keywords: Search keywords from GPT response

        Returns:
            Tuple of (latitude, longitude) if found, None otherwise
        """
        logger.info(f"Searching coordinates for keywords: {search_keywords}")

        # Try original keywords first
        nominatim_coords = await self.get_coordinates_from_nominatim(search_keywords)
        if nominatim_coords:
            logger.info(f"Found Nominatim coordinates: {nominatim_coords}")
            return nominatim_coords

        logger.info(f"Nominatim failed for original keywords: {search_keywords}")

        # Try multiple fallback patterns for better search coverage
        fallback_patterns = []
        
        # For metro/subway stations, try different formats
        if "metro" in search_keywords.lower() or "–º–µ—Ç—Ä–æ" in search_keywords.lower():
            # Extract station name and try different combinations
            station_name = search_keywords.replace("Metro", "").replace("metro", "").replace("–º–µ—Ç—Ä–æ", "").replace("—Å—Ç–∞–Ω—Ü–∏—è", "").strip()
            if "Paris" in search_keywords:
                fallback_patterns.extend([
                    f"{station_name} station Paris",
                    f"{station_name} Paris metro",
                    f"{station_name} Paris",
                    station_name.split()[0] if station_name else ""  # First word only
                ])
            elif "France" in search_keywords:
                fallback_patterns.extend([
                    f"{station_name} station",
                    f"{station_name} metro",
                    station_name.split()[0] if station_name else ""
                ])
        
        # For places with + or complex formatting
        if " + " in search_keywords or "+" in search_keywords:
            parts = search_keywords.replace("+", " ").split()
            fallback_patterns.extend([
                " ".join(parts[:2]) if len(parts) >= 2 else parts[0],  # First two words
                parts[0] if parts else "",  # First word only
            ])
        
        # For long place names, try progressively shorter versions
        words = search_keywords.split()
        if len(words) > 2:
            fallback_patterns.extend([
                " ".join(words[:3]),  # First 3 words
                " ".join(words[:2]),  # First 2 words
                words[0]  # First word only
            ])
        
        # Remove empty patterns and duplicates
        fallback_patterns = [p.strip() for p in fallback_patterns if p and p.strip()]
        fallback_patterns = list(dict.fromkeys(fallback_patterns))  # Remove duplicates while preserving order
        
        # Try each fallback pattern
        for pattern in fallback_patterns:
            if pattern and pattern != search_keywords:  # Don't retry the original
                logger.info(f"Trying fallback search: {pattern}")
                coords = await self.get_coordinates_from_nominatim(pattern)
                if coords:
                    logger.info(f"Found coordinates with fallback search '{pattern}': {coords}")
                    return coords

        logger.warning(f"No coordinates found for keywords: {search_keywords}")
        return None

    async def parse_coordinates_from_response(
        self, response: str
    ) -> tuple[float, float] | None:
        """Parse coordinates from OpenAI response using search keywords.

        Args:
            response: OpenAI response text

        Returns:
            Tuple of (latitude, longitude) if found, None otherwise
        """
        try:
            # First, try to extract search keywords from new format
            search_match = re.search(r"–ü–æ–∏—Å–∫:\s*(.+?)(?:\n|$)", response)
            if search_match:
                search_keywords = search_match.group(1).strip()
                logger.info(f"Found search keywords: {search_keywords}")

                # Use new keyword-based search
                coords = await self.get_coordinates_from_search_keywords(search_keywords)
                if coords:
                    return coords

            # Fallback: try to extract location name if no search keywords
            place_match = re.search(r"–õ–æ–∫–∞—Ü–∏—è:\s*(.+?)(?:\n|$)", response)
            if place_match:
                place_name = place_match.group(1).strip()
                logger.info(f"No search keywords found, using location name: {place_name}")

                # Use location name as search keywords
                coords = await self.get_coordinates_from_search_keywords(place_name)
                if coords:
                    return coords

            logger.debug("No search keywords or location name found in response")
            return None

        except (ValueError, AttributeError) as e:
            logger.warning(f"Error parsing coordinates: {e}")
            return None


# Global client instance - will be initialized lazily
_openai_client: OpenAIClient | None = None


def get_openai_client() -> OpenAIClient:
    """Get or create the global OpenAI client instance."""
    global _openai_client
    if _openai_client is None:
        _openai_client = OpenAIClient()
    return _openai_client
